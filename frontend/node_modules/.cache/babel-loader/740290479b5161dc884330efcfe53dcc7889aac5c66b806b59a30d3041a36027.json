{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\CourseWork\\\\frontend\\\\src\\\\components\\\\MatchList.js\";\n// frontend/src/components/MatchList.js\n\nimport React from \"react\";\n// Импортируем библиотеку React, необходимую для создания функциональных компонентов.\nimport MatchItem from \"./MatchItem\";\n// Импортируем компонент `MatchItem` из того же каталога. Этот компонент будет отвечать за отображение одного матча.\n\n// Вспомогательная карта для получения полного имени лиги по коду, если competition_name отсутствует.\n// Используется для заголовков групп, когда selectedLeague === null.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst leagueCodeToFullName = {\n  // Этот объект используется как \"словарь\" для преобразования короткого кода лиги (например, \"PL\") в полное название\n  // (например, \"Premier League\"). Это полезно, если данные, приходящие с бэкенда, не всегда содержат полное имя лиги.\n  PL: \"Premier League\",\n  PD: \"La Liga\",\n  SA: \"Serie A\",\n  BL1: \"Bundesliga\",\n  FL1: \"Ligue 1\"\n  // Добавьте другие лиги, если они могут появиться в данных, но не в leaguesForSidebar\n};\n\n// MatchList теперь принимает orderedLeagues для упорядочивания групп лиг\nfunction MatchList({\n  matches,\n  selectedLeague,\n  orderedLeagues\n}) {\n  // Это функциональный React-компонент `MatchList`.\n  // Он принимает три \"пропса\" (свойства):\n  // - `matches`: массив объектов, каждый из которых представляет собой данные о матче.\n  // - `selectedLeague`: код выбранной лиги (или `null`, если выбрано \"ВСЕ лиги\").\n  // - `orderedLeagues`: массив объектов лиг из `HomePage.js`, используемый для определения порядка отображения групп лиг.\n\n  // 1. Проверки входных данных и обработка пустых состояний\n\n  if (!Array.isArray(matches)) {\n    // Проверяем, что `matches` действительно является массивом.\n    // Если нет, выводим сообщение об ошибке, чтобы предотвратить сбой приложения.\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-brand-primary-red py-10\",\n      children: \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u043C\\u0430\\u0442\\u0447\\u0435\\u0439 \\u043D\\u0435 \\u0432 \\u043E\\u0436\\u0438\\u0434\\u0430\\u0435\\u043C\\u043E\\u043C \\u0444\\u043E\\u0440\\u043C\\u0430\\u0442\\u0435.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n  if (matches.length === 0) {\n    // Если массив `matches` пустой (т.е. нет матчей для отображения),\n    // выводим соответствующее сообщение.\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-brand-text-muted py-10\",\n      children: \"\\u041C\\u0430\\u0442\\u0447\\u0438 \\u043D\\u0430 \\u0431\\u043B\\u0438\\u0436\\u0430\\u0439\\u0448\\u0443\\u044E \\u043D\\u0435\\u0434\\u0435\\u043B\\u044E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u044B.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 2. Логика группировки матчей по лигам (если не выбрана конкретная лига)\n\n  let groupedMatchesByCode = {}; // Инициализируем пустой объект для хранения сгруппированных матчей.\n  // Ключами будут коды лиг, значениями - объекты с именем лиги, кодом и массивом матчей этой лиги.\n\n  if (!selectedLeague) {\n    // Этот блок кода выполняется ТОЛЬКО, если в `HomePage` выбрана опция \"ВСЕ лиги\"\n    // (т.е. `selectedLeague` равен `null`).\n    // Если выбрана конкретная лига, то матчи уже отфильтрованы, и группировка по лигам не нужна.\n\n    matches.forEach(match => {\n      // Перебираем каждый матч в полученном массиве `matches`.\n      const leagueCode = match.competition_code;\n      // Получаем код лиги для текущего матча.\n      // Получаем полное имя лиги для отображения, если оно не указано в match.competition_name\n\n      /////////////////////////\n      // Находим соответствующую лигу в orderedLeagues, чтобы получить ее предпочитаемое имя\n      // (этот массив пришел из HomePage и содержит \"La Liga\" для кода \"PD\")\n      const preferredLeagueInfo = orderedLeagues.find(l => l.code === leagueCode);\n\n      // Приоритет имени: сначала из preferredLeagueInfo (наши настроенные имена),\n      // потом из данных матча (если preferredLeagueInfo не найден),\n      // потом из локальной карты (если даже match.competition_name пустой),\n      // потом дефолт \"Другие лиги\".\n      const leagueName = preferredLeagueInfo ? preferredLeagueInfo.name : match.competition_name || leagueCodeToFullName[leagueCode] || \"Другие лиги\";\n      // const leagueName =\n      //   match.competition_name ||\n      //   // Пытаемся взять имя лиги из данных матча.\n      //   leagueCodeToFullName[leagueCode] ||\n      //   // Если его нет, ищем в нашем словаре `leagueCodeToFullName`.\n      //   \"Другие лиги\";\n      // Если нигде не нашли, используем общее название \"Другие лиги\".\n      /////////////////////////////////////\n\n      if (!groupedMatchesByCode[leagueCode]) {\n        // Если для этой лиги еще нет группы в `groupedMatchesByCode`, создаем ее.\n        groupedMatchesByCode[leagueCode] = {\n          name: leagueName,\n          // Имя лиги для заголовка.\n          code: leagueCode,\n          // Код лиги.\n          matches: [] // Пустой массив для матчей этой лиги.\n        };\n      }\n      groupedMatchesByCode[leagueCode].matches.push(match);\n      // Добавляем текущий матч в соответствующую группу лиги.\n    });\n  }\n\n  // 3. Логика определения порядка отображения групп лиг\n\n  let leaguesToDisplay = [];\n  // Инициализируем пустой массив, который будет содержать группы лиг в правильном порядке.\n\n  if (!selectedLeague) {\n    // Этот блок также выполняется ТОЛЬКО, если выбрано \"ВСЕ лиги\".\n    const addedLeagueCodes = new Set(); // Используем Set для быстрого отслеживания уже добавленных лиг, чтобы избежать дубликатов.\n\n    // 1. Добавляем лиги в заданном порядке из orderedLeagues (полученного из sidebar'а)\n    orderedLeagues.forEach(sidebarLeague => {\n      // Перебираем лиги в том порядке, в котором они заданы в сайдбаре (`leaguesForSidebar` из `HomePage.js`).\n      if (sidebarLeague.code && groupedMatchesByCode[sidebarLeague.code]) {\n        // Если это не \"ВСЕ\" (sidebarLeague.code не null) И для этой лиги есть матчи, которые мы сгруппировали,\n        leaguesToDisplay.push(groupedMatchesByCode[sidebarLeague.code]);\n        // Добавляем эту группу лиг в наш список для отображения.\n        addedLeagueCodes.add(sidebarLeague.code); // Отмечаем, что этот код лиги уже добавлен.\n      }\n    });\n\n    // 2. Добавляем \"Другие лиги\" (те, которых нет в orderedLeagues), если есть\n    // Итерируем по всем группам, которые были сформированы, но еще не добавлены в `leaguesToDisplay`.\n    Object.keys(groupedMatchesByCode).forEach(code => {\n      // Проходим по всем кодам лиг, для которых у нас есть сгруппированные матчи.\n      if (!addedLeagueCodes.has(code)) {\n        // Если эта лига еще не была добавлена в `leaguesToDisplay` (т.е. ее не было в `orderedLeagues` или она была там, но после \"ВСЕ\"),\n        leaguesToDisplay.push(groupedMatchesByCode[code]);\n        // Добавляем ее в конец списка.\n      }\n    });\n  } else {\n    // Если выбрана КОНКРЕТНАЯ лига, то группировка не нужна.\n    // В этом случае `MatchList` просто отобразит уже отфильтрованные матчи, без заголовков групп.\n    // Этот `else` блок на самом деле ничего не делает с `leaguesToDisplay` или `groupedMatchesByCode`,\n    // так как рендеринг будет происходить на основе исходного `matches` пропса,\n    // который уже отфильтрован в `HomePage`.\n  }\n\n  // 4. JSX (что будет отрисовано компонентом)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !selectedLeague ?\n    // Условный рендеринг: если `selectedLeague` равен `null` (выбрано \"ВСЕ\"),\n    // тогда отображаем матчи, сгруппированные по лигам.\n    leaguesToDisplay.map((leagueGroup // Итерируем по отсортированному списку групп лиг (`leaguesToDisplay`).\n    ) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-10\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl sm:text-3xl font-bold mb-6 text-center text-brand-primary-yellow uppercase tracking-wider relative\",\n        children: [leagueGroup.name, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute left-1/2 -translate-x-1/2 bottom-0 w-3/4 h-0.5 bg-gradient-to-r from-transparent via-brand-primary-red to-transparent opacity-75\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\",\n        children: leagueGroup.matches.map(match =>\n        /*#__PURE__*/\n        // Итерируем по матчам внутри текущей группы лиг.\n        _jsxDEV(MatchItem, {\n          match: match\n        }, match.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 19\n        }, this)\n        // Для каждого матча рендерим компонент `MatchItem`, передавая ему данные `match` и уникальный `key`.\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }, this)]\n    }, leagueGroup.code || leagueGroup.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)) :\n    /*#__PURE__*/\n    // Иначе (если выбрана конкретная лига), отображаем матчи без группировки и заголовков лиг.\n    _jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\",\n      children: matches.map(match =>\n      /*#__PURE__*/\n      // Итерируем по всем матчам, которые были переданы в `MatchList` (они уже отфильтрованы по одной лиге).\n      _jsxDEV(MatchItem, {\n        match: match\n      }, match.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this)\n      // Рендерим `MatchItem` для каждого матча.\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n_c = MatchList;\nexport default MatchList;\n// Экспортируем компонент `MatchList`, чтобы его можно было использовать в других файлах (например, в `HomePage.js`).\nvar _c;\n$RefreshReg$(_c, \"MatchList\");","map":{"version":3,"names":["React","MatchItem","jsxDEV","_jsxDEV","leagueCodeToFullName","PL","PD","SA","BL1","FL1","MatchList","matches","selectedLeague","orderedLeagues","Array","isArray","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","groupedMatchesByCode","forEach","match","leagueCode","competition_code","preferredLeagueInfo","find","l","code","leagueName","name","competition_name","push","leaguesToDisplay","addedLeagueCodes","Set","sidebarLeague","add","Object","keys","has","map","leagueGroup","id","_c","$RefreshReg$"],"sources":["D:/git/CourseWork/frontend/src/components/MatchList.js"],"sourcesContent":["// frontend/src/components/MatchList.js\r\n\r\nimport React from \"react\";\r\n// Импортируем библиотеку React, необходимую для создания функциональных компонентов.\r\nimport MatchItem from \"./MatchItem\";\r\n// Импортируем компонент `MatchItem` из того же каталога. Этот компонент будет отвечать за отображение одного матча.\r\n\r\n// Вспомогательная карта для получения полного имени лиги по коду, если competition_name отсутствует.\r\n// Используется для заголовков групп, когда selectedLeague === null.\r\nconst leagueCodeToFullName = {\r\n  // Этот объект используется как \"словарь\" для преобразования короткого кода лиги (например, \"PL\") в полное название\r\n  // (например, \"Premier League\"). Это полезно, если данные, приходящие с бэкенда, не всегда содержат полное имя лиги.\r\n  PL: \"Premier League\",\r\n  PD: \"La Liga\",\r\n  SA: \"Serie A\",\r\n  BL1: \"Bundesliga\",\r\n  FL1: \"Ligue 1\",\r\n  // Добавьте другие лиги, если они могут появиться в данных, но не в leaguesForSidebar\r\n};\r\n\r\n// MatchList теперь принимает orderedLeagues для упорядочивания групп лиг\r\nfunction MatchList({ matches, selectedLeague, orderedLeagues }) {\r\n  // Это функциональный React-компонент `MatchList`.\r\n  // Он принимает три \"пропса\" (свойства):\r\n  // - `matches`: массив объектов, каждый из которых представляет собой данные о матче.\r\n  // - `selectedLeague`: код выбранной лиги (или `null`, если выбрано \"ВСЕ лиги\").\r\n  // - `orderedLeagues`: массив объектов лиг из `HomePage.js`, используемый для определения порядка отображения групп лиг.\r\n\r\n  // 1. Проверки входных данных и обработка пустых состояний\r\n\r\n  if (!Array.isArray(matches)) {\r\n    // Проверяем, что `matches` действительно является массивом.\r\n    // Если нет, выводим сообщение об ошибке, чтобы предотвратить сбой приложения.\r\n    return (\r\n      <p className=\"text-center text-brand-primary-red py-10\">\r\n        Ошибка: данные матчей не в ожидаемом формате.\r\n      </p>\r\n    );\r\n  }\r\n  if (matches.length === 0) {\r\n    // Если массив `matches` пустой (т.е. нет матчей для отображения),\r\n    // выводим соответствующее сообщение.\r\n    return (\r\n      <p className=\"text-center text-brand-text-muted py-10\">\r\n        Матчи на ближайшую неделю не найдены.\r\n      </p>\r\n    );\r\n  }\r\n\r\n  // 2. Логика группировки матчей по лигам (если не выбрана конкретная лига)\r\n\r\n  let groupedMatchesByCode = {}; // Инициализируем пустой объект для хранения сгруппированных матчей.\r\n  // Ключами будут коды лиг, значениями - объекты с именем лиги, кодом и массивом матчей этой лиги.\r\n\r\n  if (!selectedLeague) {\r\n    // Этот блок кода выполняется ТОЛЬКО, если в `HomePage` выбрана опция \"ВСЕ лиги\"\r\n    // (т.е. `selectedLeague` равен `null`).\r\n    // Если выбрана конкретная лига, то матчи уже отфильтрованы, и группировка по лигам не нужна.\r\n\r\n    matches.forEach((match) => {\r\n      // Перебираем каждый матч в полученном массиве `matches`.\r\n      const leagueCode = match.competition_code;\r\n      // Получаем код лиги для текущего матча.\r\n      // Получаем полное имя лиги для отображения, если оно не указано в match.competition_name\r\n\r\n      /////////////////////////\r\n      // Находим соответствующую лигу в orderedLeagues, чтобы получить ее предпочитаемое имя\r\n      // (этот массив пришел из HomePage и содержит \"La Liga\" для кода \"PD\")\r\n      const preferredLeagueInfo = orderedLeagues.find(\r\n        (l) => l.code === leagueCode\r\n      );\r\n\r\n      // Приоритет имени: сначала из preferredLeagueInfo (наши настроенные имена),\r\n      // потом из данных матча (если preferredLeagueInfo не найден),\r\n      // потом из локальной карты (если даже match.competition_name пустой),\r\n      // потом дефолт \"Другие лиги\".\r\n      const leagueName = preferredLeagueInfo\r\n        ? preferredLeagueInfo.name\r\n        : match.competition_name ||\r\n          leagueCodeToFullName[leagueCode] ||\r\n          \"Другие лиги\";\r\n      // const leagueName =\r\n      //   match.competition_name ||\r\n      //   // Пытаемся взять имя лиги из данных матча.\r\n      //   leagueCodeToFullName[leagueCode] ||\r\n      //   // Если его нет, ищем в нашем словаре `leagueCodeToFullName`.\r\n      //   \"Другие лиги\";\r\n      // Если нигде не нашли, используем общее название \"Другие лиги\".\r\n      /////////////////////////////////////\r\n\r\n      if (!groupedMatchesByCode[leagueCode]) {\r\n        // Если для этой лиги еще нет группы в `groupedMatchesByCode`, создаем ее.\r\n        groupedMatchesByCode[leagueCode] = {\r\n          name: leagueName, // Имя лиги для заголовка.\r\n          code: leagueCode, // Код лиги.\r\n          matches: [], // Пустой массив для матчей этой лиги.\r\n        };\r\n      }\r\n      groupedMatchesByCode[leagueCode].matches.push(match);\r\n      // Добавляем текущий матч в соответствующую группу лиги.\r\n    });\r\n  }\r\n\r\n  // 3. Логика определения порядка отображения групп лиг\r\n\r\n  let leaguesToDisplay = [];\r\n  // Инициализируем пустой массив, который будет содержать группы лиг в правильном порядке.\r\n\r\n  if (!selectedLeague) {\r\n    // Этот блок также выполняется ТОЛЬКО, если выбрано \"ВСЕ лиги\".\r\n    const addedLeagueCodes = new Set(); // Используем Set для быстрого отслеживания уже добавленных лиг, чтобы избежать дубликатов.\r\n\r\n    // 1. Добавляем лиги в заданном порядке из orderedLeagues (полученного из sidebar'а)\r\n    orderedLeagues.forEach((sidebarLeague) => {\r\n      // Перебираем лиги в том порядке, в котором они заданы в сайдбаре (`leaguesForSidebar` из `HomePage.js`).\r\n      if (sidebarLeague.code && groupedMatchesByCode[sidebarLeague.code]) {\r\n        // Если это не \"ВСЕ\" (sidebarLeague.code не null) И для этой лиги есть матчи, которые мы сгруппировали,\r\n        leaguesToDisplay.push(groupedMatchesByCode[sidebarLeague.code]);\r\n        // Добавляем эту группу лиг в наш список для отображения.\r\n        addedLeagueCodes.add(sidebarLeague.code); // Отмечаем, что этот код лиги уже добавлен.\r\n      }\r\n    });\r\n\r\n    // 2. Добавляем \"Другие лиги\" (те, которых нет в orderedLeagues), если есть\r\n    // Итерируем по всем группам, которые были сформированы, но еще не добавлены в `leaguesToDisplay`.\r\n    Object.keys(groupedMatchesByCode).forEach((code) => {\r\n      // Проходим по всем кодам лиг, для которых у нас есть сгруппированные матчи.\r\n      if (!addedLeagueCodes.has(code)) {\r\n        // Если эта лига еще не была добавлена в `leaguesToDisplay` (т.е. ее не было в `orderedLeagues` или она была там, но после \"ВСЕ\"),\r\n        leaguesToDisplay.push(groupedMatchesByCode[code]);\r\n        // Добавляем ее в конец списка.\r\n      }\r\n    });\r\n  } else {\r\n    // Если выбрана КОНКРЕТНАЯ лига, то группировка не нужна.\r\n    // В этом случае `MatchList` просто отобразит уже отфильтрованные матчи, без заголовков групп.\r\n    // Этот `else` блок на самом деле ничего не делает с `leaguesToDisplay` или `groupedMatchesByCode`,\r\n    // так как рендеринг будет происходить на основе исходного `matches` пропса,\r\n    // который уже отфильтрован в `HomePage`.\r\n  }\r\n\r\n  // 4. JSX (что будет отрисовано компонентом)\r\n\r\n  return (\r\n    <div>\r\n      {!selectedLeague ? (\r\n        // Условный рендеринг: если `selectedLeague` равен `null` (выбрано \"ВСЕ\"),\r\n        // тогда отображаем матчи, сгруппированные по лигам.\r\n        leaguesToDisplay.map(\r\n          (\r\n            leagueGroup // Итерируем по отсортированному списку групп лиг (`leaguesToDisplay`).\r\n          ) => (\r\n            <div key={leagueGroup.code || leagueGroup.name} className=\"mb-10\">\r\n              {\" \"}\r\n              {/* Контейнер для каждой группы лиг. `key` важен для React. `mb-10` - нижний отступ. */}\r\n              {/* Заголовок лиги с желтым текстом и красной подсветкой */}\r\n              <h2 className=\"text-2xl sm:text-3xl font-bold mb-6 text-center text-brand-primary-yellow uppercase tracking-wider relative\">\r\n                {leagueGroup.name}\r\n                {/* Отображаем название лиги (например, \"Premier League\"). */}\r\n                {/* Красная линия-подсветка по краям */}\r\n                <div className=\"absolute left-1/2 -translate-x-1/2 bottom-0 w-3/4 h-0.5 bg-gradient-to-r from-transparent via-brand-primary-red to-transparent opacity-75\"></div>\r\n                {/* Это декоративная линия под заголовком, созданная с помощью Tailwind CSS. */}\r\n              </h2>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\">\r\n                {/* Сетка для отображения матчей: 1 колонка на мобильных, 2 на средних и больших экранах. */}\r\n                {leagueGroup.matches.map((match) => (\r\n                  // Итерируем по матчам внутри текущей группы лиг.\r\n                  <MatchItem key={match.id} match={match} />\r\n                  // Для каждого матча рендерим компонент `MatchItem`, передавая ему данные `match` и уникальный `key`.\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )\r\n        )\r\n      ) : (\r\n        // Иначе (если выбрана конкретная лига), отображаем матчи без группировки и заголовков лиг.\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\">\r\n          {/* Аналогичная сетка для отображения матчей. */}\r\n          {matches.map((match) => (\r\n            // Итерируем по всем матчам, которые были переданы в `MatchList` (они уже отфильтрованы по одной лиге).\r\n            <MatchItem key={match.id} match={match} />\r\n            // Рендерим `MatchItem` для каждого матча.\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MatchList;\r\n// Экспортируем компонент `MatchList`, чтобы его можно было использовать в других файлах (например, в `HomePage.js`).\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}