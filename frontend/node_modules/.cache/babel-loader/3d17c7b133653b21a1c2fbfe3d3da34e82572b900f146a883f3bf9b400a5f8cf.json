{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:5000/api\";\n\n// Вспомогательная функция для парсинга данных ответа.\nconst parseData = data => {\n  // Проверяет, является ли `data` строкой (что иногда бывает при получении JSON).\n  if (typeof data === \"string\") {\n    try {\n      return JSON.parse(data); // Попытка распарсить строку как JSON.\n    } catch (e) {\n      // Логирование ошибки парсинга.\n      console.error(\"Ошибка парсинга JSON строки от API:\", e, \"Строка:\", data);\n      return null; // Возвращаем null при ошибке.\n    }\n  }\n  return data; // Если уже объект/массив, возвращаем как есть.\n};\n\n// Функция для получения списка матчей.\nexport const getMatches = async (leagueCode = null) => {\n  try {\n    let url = `${API_BASE_URL}/matches/`; // Базовый URL для матчей.\n    if (leagueCode) {\n      url += `?league=${leagueCode}`; // Добавляем параметр лиги, если указан.\n    }\n    const response = await axios.get(url); // Отправляем GET-запрос с Axios.\n    console.log(\"Полный ответ от axios (getMatches):\", response); // Логируем полный ответ.\n    const parsedData = parseData(response.data); // Парсим данные ответа.\n    console.log(\"Распарсенные данные (getMatches):\", parsedData); // Логируем распарсенные данные.\n    return Array.isArray(parsedData) ? parsedData : []; // Возвращаем массив или пустой массив.\n  } catch (error) {\n    console.error(\"Ошибка при загрузке списка матчей:\", error); // Логируем ошибку.\n    return []; // Возвращаем пустой массив при ошибке.\n  }\n};\n\n// Функция для получения деталей конкретного матча по ID.\nexport const getMatchById = async matchId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/matches/${matchId}`); // Запрос деталей матча.\n    console.log(\"Полный ответ от axios (getMatchById):\", response); // Логируем полный ответ.\n    const parsedData = parseData(response.data); // Парсим данные.\n    console.log(\"Распарсенные данные (getMatchById):\", parsedData); // Логируем распарсенные данные.\n    return parsedData; // Возвращаем данные матча (объект или null).\n  } catch (error) {\n    console.error(`Ошибка при загрузке матча с ID ${matchId}:`, error); // Логируем ошибку.\n    return null; // Возвращаем null при ошибке.\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","parseData","data","JSON","parse","e","console","error","getMatches","leagueCode","url","response","get","log","parsedData","Array","isArray","getMatchById","matchId"],"sources":["D:/git/CourseWork/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"http://localhost:5000/api\";\r\n\r\n// Вспомогательная функция для парсинга данных ответа.\r\nconst parseData = (data) => {\r\n  // Проверяет, является ли `data` строкой (что иногда бывает при получении JSON).\r\n  if (typeof data === \"string\") {\r\n    try {\r\n      return JSON.parse(data); // Попытка распарсить строку как JSON.\r\n    } catch (e) {\r\n      // Логирование ошибки парсинга.\r\n      console.error(\"Ошибка парсинга JSON строки от API:\", e, \"Строка:\", data);\r\n      return null; // Возвращаем null при ошибке.\r\n    }\r\n  }\r\n  return data; // Если уже объект/массив, возвращаем как есть.\r\n};\r\n\r\n// Функция для получения списка матчей.\r\nexport const getMatches = async (leagueCode = null) => {\r\n  try {\r\n    let url = `${API_BASE_URL}/matches/`; // Базовый URL для матчей.\r\n    if (leagueCode) {\r\n      url += `?league=${leagueCode}`; // Добавляем параметр лиги, если указан.\r\n    }\r\n    const response = await axios.get(url); // Отправляем GET-запрос с Axios.\r\n    console.log(\"Полный ответ от axios (getMatches):\", response); // Логируем полный ответ.\r\n    const parsedData = parseData(response.data); // Парсим данные ответа.\r\n    console.log(\"Распарсенные данные (getMatches):\", parsedData); // Логируем распарсенные данные.\r\n    return Array.isArray(parsedData) ? parsedData : []; // Возвращаем массив или пустой массив.\r\n  } catch (error) {\r\n    console.error(\"Ошибка при загрузке списка матчей:\", error); // Логируем ошибку.\r\n    return []; // Возвращаем пустой массив при ошибке.\r\n  }\r\n};\r\n\r\n// Функция для получения деталей конкретного матча по ID.\r\nexport const getMatchById = async (matchId) => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/matches/${matchId}`); // Запрос деталей матча.\r\n    console.log(\"Полный ответ от axios (getMatchById):\", response); // Логируем полный ответ.\r\n    const parsedData = parseData(response.data); // Парсим данные.\r\n    console.log(\"Распарсенные данные (getMatchById):\", parsedData); // Логируем распарсенные данные.\r\n    return parsedData; // Возвращаем данные матча (объект или null).\r\n  } catch (error) {\r\n    console.error(`Ошибка при загрузке матча с ID ${matchId}:`, error); // Логируем ошибку.\r\n    return null; // Возвращаем null при ошибке.\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,SAAS,GAAIC,IAAI,IAAK;EAC1B;EACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,IAAI;MACF,OAAOC,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,OAAOG,CAAC,EAAE;MACV;MACAC,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEF,CAAC,EAAE,SAAS,EAAEH,IAAI,CAAC;MACxE,OAAO,IAAI,CAAC,CAAC;IACf;EACF;EACA,OAAOA,IAAI,CAAC,CAAC;AACf,CAAC;;AAED;AACA,OAAO,MAAMM,UAAU,GAAG,MAAAA,CAAOC,UAAU,GAAG,IAAI,KAAK;EACrD,IAAI;IACF,IAAIC,GAAG,GAAG,GAAGV,YAAY,WAAW,CAAC,CAAC;IACtC,IAAIS,UAAU,EAAE;MACdC,GAAG,IAAI,WAAWD,UAAU,EAAE,CAAC,CAAC;IAClC;IACA,MAAME,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACF,GAAG,CAAC,CAAC,CAAC;IACvCJ,OAAO,CAACO,GAAG,CAAC,qCAAqC,EAAEF,QAAQ,CAAC,CAAC,CAAC;IAC9D,MAAMG,UAAU,GAAGb,SAAS,CAACU,QAAQ,CAACT,IAAI,CAAC,CAAC,CAAC;IAC7CI,OAAO,CAACO,GAAG,CAAC,mCAAmC,EAAEC,UAAU,CAAC,CAAC,CAAC;IAC9D,OAAOC,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,GAAGA,UAAU,GAAG,EAAE,CAAC,CAAC;EACtD,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC5D,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,YAAY,GAAG,MAAOC,OAAO,IAAK;EAC7C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,GAAGZ,YAAY,YAAYkB,OAAO,EAAE,CAAC,CAAC,CAAC;IACxEZ,OAAO,CAACO,GAAG,CAAC,uCAAuC,EAAEF,QAAQ,CAAC,CAAC,CAAC;IAChE,MAAMG,UAAU,GAAGb,SAAS,CAACU,QAAQ,CAACT,IAAI,CAAC,CAAC,CAAC;IAC7CI,OAAO,CAACO,GAAG,CAAC,qCAAqC,EAAEC,UAAU,CAAC,CAAC,CAAC;IAChE,OAAOA,UAAU,CAAC,CAAC;EACrB,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,kCAAkCW,OAAO,GAAG,EAAEX,KAAK,CAAC,CAAC,CAAC;IACpE,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}