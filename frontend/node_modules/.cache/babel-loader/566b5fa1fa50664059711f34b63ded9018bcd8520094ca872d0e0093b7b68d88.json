{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\CourseWork\\\\frontend\\\\src\\\\App.js\";\n// frontend/src/App.js\n\n// 1. Импорт необходимых библиотек и компонентов\n\nimport React from \"react\";\n// Эта строчка говорит: \"Мне нужен React\" - библиотека, которая позволяет писать компоненты и строить пользовательский интерфейс.\n// Это как если бы ты сказал: \"Мне нужен набор инструментов для строительства\".\n\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n// Это импорт компонентов из библиотеки 'react-router-dom', которая помогает управлять \"переходами\" между страницами твоего сайта без перезагрузки.\n// - `BrowserRouter as Router`: Это как \"главный навигатор\" или \"карта дорог\" для всего приложения. Мы переименовали его в `Router` для удобства.\n// - `Route`: Это \"отдельный путь\" или \"дорога\" на нашей карте.\n// - `Routes`: Это \"список всех дорог\".\n// В целом, это как сказать: \"Мне нужна система навигации для сайта, чтобы пользователь мог переключаться между разделами\".\n\nimport HomePage from \"./pages/HomePage\";\n// Импортируем компонент `HomePage` (главная страница) из файла `HomePage.js`, который находится в папке `pages`.\n// Это как сказать: \"Мне нужна готовая 'комната' под названием 'Главная'\".\n\nimport MatchDetailPage from \"./pages/MatchDetailPage\";\n// Импортируем компонент `MatchDetailPage` (страница деталей матча) из файла `MatchDetailPage.js` в папке `pages`.\n// Это как сказать: \"Мне нужна готовая 'комната' под названием 'Детали матча'\".\n\nimport Header from \"./components/Layout/Header\";\n// Импортируем компонент `Header` (шапка сайта) из файла `Header.js`, который находится в папке `components/Layout`.\n// Это как сказать: \"Мне нужна готовая 'деталь LEGO' под названием 'Шапка'\".\n\nimport HistoryPage from \"./pages/HistoryPage\"; // Импортируем новую страницу\n// Импортируем компонент `HistoryPage` (страница истории) из файла `HistoryPage.js` в папке `pages`.\n// Это как сказать: \"Мне нужна готовая 'комната' под названием 'История'\".\n\nimport TablesPage from \"./pages/TablesPage\"; // Импортируем новую страницу\n// Импортируем компонент `TablesPage` (страница таблиц) из файла `TablesPage.js` в папке `pages`.\n// Это как сказать: \"Мне нужна готовая 'комната' под названием 'Таблицы'\".\n\nimport \"./App.css\"; // Если есть глобальные стили для App, помимо index.css\n// Это импорт CSS-файла `App.css`, который содержит стили (внешний вид) только для этого компонента `App` или общие стили для всего приложения.\n// Это как сказать: \"Примени вот эти правила дизайна к моей основной структуре\".\n\n// 2. Определение главного компонента App\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // Это функция, которая определяет наш главный React-компонент, называемый `App`.\n  // Все, что она возвращает, React превратит в HTML и покажет на экране.\n  // Это как \"план\" или \"инструкция по сборке\" нашего дома.\n\n  return (\n    /*#__PURE__*/\n    // Все, что находится внутри `return`, это JSX - синтаксис, похожий на HTML, но позволяющий вставлять JavaScript.\n    // Это то, что будет нарисовано на экране.\n    _jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col min-h-screen bg-brand-bg text-brand-text-light\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"flex-grow container mx-auto px-4 py-8 pt-16\",\n          children: /*#__PURE__*/_jsxDEV(Routes, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 38\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/match/:matchId\",\n              element: /*#__PURE__*/_jsxDEV(MatchDetailPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 52\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/history\",\n              element: /*#__PURE__*/_jsxDEV(HistoryPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 13\n            }, this), \" \", /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/tables\",\n              element: /*#__PURE__*/_jsxDEV(TablesPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 44\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 13\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n// 3. Экспорт компонента\n_c = App;\nexport default App;\n// Эта строчка делает наш компонент `App` доступным для использования в других файлах (например, в `index.js`, где он будет \"запущен\").\n// Это как сказать: \"Вот готовый план 'дома', его можно использовать для строительства\".\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Route","Routes","HomePage","MatchDetailPage","Header","HistoryPage","TablesPage","jsxDEV","_jsxDEV","App","children","className","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["D:/git/CourseWork/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\n\n// 1. Импорт необходимых библиотек и компонентов\n\nimport React from \"react\";\n// Эта строчка говорит: \"Мне нужен React\" - библиотека, которая позволяет писать компоненты и строить пользовательский интерфейс.\n// Это как если бы ты сказал: \"Мне нужен набор инструментов для строительства\".\n\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n// Это импорт компонентов из библиотеки 'react-router-dom', которая помогает управлять \"переходами\" между страницами твоего сайта без перезагрузки.\n// - `BrowserRouter as Router`: Это как \"главный навигатор\" или \"карта дорог\" для всего приложения. Мы переименовали его в `Router` для удобства.\n// - `Route`: Это \"отдельный путь\" или \"дорога\" на нашей карте.\n// - `Routes`: Это \"список всех дорог\".\n// В целом, это как сказать: \"Мне нужна система навигации для сайта, чтобы пользователь мог переключаться между разделами\".\n\nimport HomePage from \"./pages/HomePage\";\n// Импортируем компонент `HomePage` (главная страница) из файла `HomePage.js`, который находится в папке `pages`.\n// Это как сказать: \"Мне нужна готовая 'комната' под названием 'Главная'\".\n\nimport MatchDetailPage from \"./pages/MatchDetailPage\";\n// Импортируем компонент `MatchDetailPage` (страница деталей матча) из файла `MatchDetailPage.js` в папке `pages`.\n// Это как сказать: \"Мне нужна готовая 'комната' под названием 'Детали матча'\".\n\nimport Header from \"./components/Layout/Header\";\n// Импортируем компонент `Header` (шапка сайта) из файла `Header.js`, который находится в папке `components/Layout`.\n// Это как сказать: \"Мне нужна готовая 'деталь LEGO' под названием 'Шапка'\".\n\nimport HistoryPage from \"./pages/HistoryPage\"; // Импортируем новую страницу\n// Импортируем компонент `HistoryPage` (страница истории) из файла `HistoryPage.js` в папке `pages`.\n// Это как сказать: \"Мне нужна готовая 'комната' под названием 'История'\".\n\nimport TablesPage from \"./pages/TablesPage\"; // Импортируем новую страницу\n// Импортируем компонент `TablesPage` (страница таблиц) из файла `TablesPage.js` в папке `pages`.\n// Это как сказать: \"Мне нужна готовая 'комната' под названием 'Таблицы'\".\n\nimport \"./App.css\"; // Если есть глобальные стили для App, помимо index.css\n// Это импорт CSS-файла `App.css`, который содержит стили (внешний вид) только для этого компонента `App` или общие стили для всего приложения.\n// Это как сказать: \"Примени вот эти правила дизайна к моей основной структуре\".\n\n// 2. Определение главного компонента App\nfunction App() {\n  // Это функция, которая определяет наш главный React-компонент, называемый `App`.\n  // Все, что она возвращает, React превратит в HTML и покажет на экране.\n  // Это как \"план\" или \"инструкция по сборке\" нашего дома.\n\n  return (\n    // Все, что находится внутри `return`, это JSX - синтаксис, похожий на HTML, но позволяющий вставлять JavaScript.\n    // Это то, что будет нарисовано на экране.\n\n    <Router>\n      {/* <Router> оборачивает все компоненты, которые будут использовать навигацию. */}\n      {/* Это как \"установка глобальной навигационной системы\" для всего дома. */}\n\n      <div className=\"flex flex-col min-h-screen bg-brand-bg text-brand-text-light\">\n        {/* Это основной контейнер для всего содержимого сайта. */}\n        {/* `className=\"...\"` - это стили, которые применяются к этому контейнеру (скорее всего, с использованием Tailwind CSS). */}\n        {/* `flex flex-col`: элементы внутри будут располагаться вертикально (колонка). */}\n        {/* `min-h-screen`: минимальная высота будет равна высоте всего экрана. */}\n        {/* `bg-brand-bg`: фоновый цвет из твоих настроек Tailwind. */}\n        {/* `text-brand-text-light`: цвет текста из твоих настроек Tailwind. */}\n        {/* Это как \"общая обложка\" или \"каркас\" для всего сайта, задающий базовые цвета и расположение. */}\n\n        <Header />\n        {/* Здесь мы вставляем наш компонент `Header`. */}\n        {/* Он будет отображаться на каждой странице, потому что он находится вне блока `Routes`. */}\n        {/* Это как \"шапка\" твоего сайта, которая всегда на виду, независимо от того, в какой ты \"комнате\". */}\n\n        <main className=\"flex-grow container mx-auto px-4 py-8 pt-16\">\n          {/* Это основной блок содержимого страницы. */}\n          {/* `main`: HTML-тег, который обозначает основное содержимое документа. */}\n          {/* `flex-grow`: позволяет этому блоку \"растягиваться\" и занимать все доступное пространство по вертикали, толкая подвал (если бы он был) вниз. */}\n          {/* `container mx-auto px-4 py-8 pt-16`: снова стили Tailwind для центрирования содержимого, добавления отступов. */}\n          {/* Это как \"основная жилая площадь\" дома, где будут меняться \"комнаты\". */}\n\n          <Routes>\n            {/* <Routes> содержит все определения маршрутов (путей) в приложении. */}\n            {/* Он говорит: \"Вот список всех возможных 'дорог' в моем доме\". */}\n            <Route path=\"/\" element={<HomePage />} />\n            {/* Это определяет один \"путь\" (маршрут). */}\n            {/* `path=\"/\" `: Когда адрес в браузере будет просто `/` (главная страница), */}\n            {/* `element={<HomePage />}`: показать компонент `HomePage`. */}\n            {/* Это как сказать: \"Если пользователь идет по 'главной дороге' (URL `/`), покажи ему 'Главную комнату'\". */}\n            <Route path=\"/match/:matchId\" element={<MatchDetailPage />} />\n            {/* Еще один \"путь\". */}\n            {/* `path=\"/match/:matchId\"`: Когда адрес в браузере будет `/match/` и любое значение после (например, `/match/123`). */}\n            {/* `:matchId` - это \"переменная часть\" адреса, которую мы сможем потом использовать в `MatchDetailPage` для получения ID матча. */}\n            {/* `element={<MatchDetailPage />}`: показать компонент `MatchDetailPage`. */}\n            {/* Это как сказать: \"Если пользователь идет по 'дороге матчей' с номером, покажи ему 'Комнату деталей матча' и передай ей номер матча\". */}\n            <Route path=\"/history\" element={<HistoryPage />} />{\" \"}\n            {/* Новый роут */}\n            {/* `path=\"/history\"`: Когда адрес в браузере будет `/history`. */}\n            {/* `element={<HistoryPage />}`: показать компонент `HistoryPage`. */}\n            {/* Это как сказать: \"Если пользователь идет по 'дороге истории', покажи ему 'Историческую комнату'\". */}\n            <Route path=\"/tables\" element={<TablesPage />} /> {/* Новый роут */}\n            {/* `path=\"/tables\"`: Когда адрес в браузере будет `/tables`. */}\n            {/* `element={<TablesPage />}`: показать компонент `TablesPage`. */}\n            {/* Это как сказать: \"Если пользователь идет по 'дороге таблиц', покажи ему 'Комнату таблиц'\". */}\n          </Routes>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\n// 3. Экспорт компонента\nexport default App;\n// Эта строчка делает наш компонент `App` доступным для использования в других файлах (например, в `index.js`, где он будет \"запущен\").\n// Это как сказать: \"Вот готовый план 'дома', его можно использовать для строительства\".\n"],"mappings":";AAAA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;;AAEA,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AACzE;AACA;AACA;AACA;AACA;;AAEA,OAAOC,QAAQ,MAAM,kBAAkB;AACvC;AACA;;AAEA,OAAOC,eAAe,MAAM,yBAAyB;AACrD;AACA;;AAEA,OAAOC,MAAM,MAAM,4BAA4B;AAC/C;AACA;;AAEA,OAAOC,WAAW,MAAM,qBAAqB,CAAC,CAAC;AAC/C;AACA;;AAEA,OAAOC,UAAU,MAAM,oBAAoB,CAAC,CAAC;AAC7C;AACA;;AAEA,OAAO,WAAW,CAAC,CAAC;AACpB;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EACb;EACA;EACA;;EAEA;IAAA;IACE;IACA;IAEAD,OAAA,CAACT,MAAM;MAAAW,QAAA,eAILF,OAAA;QAAKG,SAAS,EAAC,8DAA8D;QAAAD,QAAA,gBAS3EF,OAAA,CAACJ,MAAM;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAKVP,OAAA;UAAMG,SAAS,EAAC,6CAA6C;UAAAD,QAAA,eAO3DF,OAAA,CAACP,MAAM;YAAAS,QAAA,gBAGLF,OAAA,CAACR,KAAK;cAACgB,IAAI,EAAC,GAAG;cAACC,OAAO,eAAET,OAAA,CAACN,QAAQ;gBAAAU,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAE;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAKzCP,OAAA,CAACR,KAAK;cAACgB,IAAI,EAAC,iBAAiB;cAACC,OAAO,eAAET,OAAA,CAACL,eAAe;gBAAAS,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAE;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAM9DP,OAAA,CAACR,KAAK;cAACgB,IAAI,EAAC,UAAU;cAACC,OAAO,eAAET,OAAA,CAACH,WAAW;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAE;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EAAC,GAAG,eAKvDP,OAAA,CAACR,KAAK;cAACgB,IAAI,EAAC,SAAS;cAACC,OAAO,eAAET,OAAA,CAACF,UAAU;gBAAAM,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAE;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,KAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAI5C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;AAEb;;AAEA;AAAAG,EAAA,GAhEST,GAAG;AAiEZ,eAAeA,GAAG;AAClB;AACA;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}