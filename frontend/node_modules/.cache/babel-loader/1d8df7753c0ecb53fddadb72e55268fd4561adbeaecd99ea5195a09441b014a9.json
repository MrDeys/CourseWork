{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\CourseWork\\\\frontend\\\\src\\\\index.js\";\n// frontend/src/index.js\n\nimport React from \"react\";\n// Импортируем библиотеку React. Хотя сам `index.js` не создает React-компоненты напрямую,\n// он необходим для инициализации React-окружения и для того, чтобы JSX (который используется в <App />) был понятен.\n\nimport ReactDOM from \"react-dom/client\";\n// Импортируем `ReactDOM` из 'react-dom/client'.\n// `ReactDOM` — это библиотека, которая позволяет React взаимодействовать с DOM (Document Object Model) браузера.\n// `react-dom/client` — это новый API для React 18+, предназначенный для клиентского рендеринга.\n// Он обеспечивает более эффективный способ \"внедрения\" React-приложения в HTML-страницу.\n\nimport \"./index.css\"; // Глобальные стили\n// Импортируем файл глобальных стилей `index.css`.\n// Все стили, определенные в `index.css`, будут применены ко всему твоему приложению.\n// Это могут быть базовые стили для `body`, сброс стилей, или общие переменные CSS.\n\nimport App from \"./App\";\n// Импортируем главный компонент твоего приложения `App` из файла `./App.js`.\n// Как мы уже обсуждали, `App` является корневым компонентом, который собирает все остальные страницы и компоненты.\n\n// Создание \"корневого\" элемента React\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// Это ключевая строка для запуска React-приложения.\n// `document.getElementById(\"root\")` находит в твоем `public/index.html` элемент `<div>` с `id=\"root\"`.\n// <div id=\"root\"></div> - это то место в HTML-странице, куда будет \"встроен\" весь твой React-код.\n// `ReactDOM.createRoot()` создает новый \"корень\" React, который будет управлять DOM-деревом внутри этого `div`.\n// Это более современный и производительный способ рендеринга в React 18+ по сравнению со старым `ReactDOM.render()`.\n\n// Рендеринг корневого компонента в DOM\nroot.render(\n/*#__PURE__*/\n// Метод `render` \"рисует\" React-элементы внутри созданного `root` элемента.\n_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 33,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/git/CourseWork/frontend/src/index.js"],"sourcesContent":["// frontend/src/index.js\n\nimport React from \"react\";\n// Импортируем библиотеку React. Хотя сам `index.js` не создает React-компоненты напрямую,\n// он необходим для инициализации React-окружения и для того, чтобы JSX (который используется в <App />) был понятен.\n\nimport ReactDOM from \"react-dom/client\";\n// Импортируем `ReactDOM` из 'react-dom/client'.\n// `ReactDOM` — это библиотека, которая позволяет React взаимодействовать с DOM (Document Object Model) браузера.\n// `react-dom/client` — это новый API для React 18+, предназначенный для клиентского рендеринга.\n// Он обеспечивает более эффективный способ \"внедрения\" React-приложения в HTML-страницу.\n\nimport \"./index.css\"; // Глобальные стили\n// Импортируем файл глобальных стилей `index.css`.\n// Все стили, определенные в `index.css`, будут применены ко всему твоему приложению.\n// Это могут быть базовые стили для `body`, сброс стилей, или общие переменные CSS.\n\nimport App from \"./App\";\n// Импортируем главный компонент твоего приложения `App` из файла `./App.js`.\n// Как мы уже обсуждали, `App` является корневым компонентом, который собирает все остальные страницы и компоненты.\n\n// Создание \"корневого\" элемента React\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// Это ключевая строка для запуска React-приложения.\n// `document.getElementById(\"root\")` находит в твоем `public/index.html` элемент `<div>` с `id=\"root\"`.\n// <div id=\"root\"></div> - это то место в HTML-странице, куда будет \"встроен\" весь твой React-код.\n// `ReactDOM.createRoot()` создает новый \"корень\" React, который будет управлять DOM-деревом внутри этого `div`.\n// Это более современный и производительный способ рендеринга в React 18+ по сравнению со старым `ReactDOM.render()`.\n\n// Рендеринг корневого компонента в DOM\nroot.render(\n  // Метод `render` \"рисует\" React-элементы внутри созданного `root` элемента.\n  <React.StrictMode>\n    {/* <React.StrictMode> - Это специальный компонент React, который помогает выявлять потенциальные проблемы в приложении во время разработки.\n        Он не рендерит никаких видимых элементов UI. Вместо этого он включает дополнительные проверки и предупреждения:\n        - Идентифицирует небезопасные жизненные циклы компонентов.\n        - Предупреждает об использовании устаревших API.\n        - Обнаруживает нежелательные побочные эффекты.\n        Важно: `StrictMode` работает ТОЛЬКО в режиме разработки и не влияет на производительность или поведение приложения в продакшене. */}\n    <App />\n    {/* Здесь мы рендерим наш главный компонент `App`.\n        Весь твой React-сайт начинается именно с этого компонента. */}\n  </React.StrictMode>\n);"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;;AAEA,OAAOC,QAAQ,MAAM,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA,OAAO,aAAa,CAAC,CAAC;AACtB;AACA;AACA;;AAEA,OAAOC,GAAG,MAAM,OAAO;AACvB;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,IAAI,GAAGJ,QAAQ,CAACK,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACAH,IAAI,CAACI,MAAM;AAAA;AACT;AACAL,OAAA,CAACJ,KAAK,CAACU,UAAU;EAAAC,QAAA,eAOfP,OAAA,CAACF,GAAG;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAGS,CACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}