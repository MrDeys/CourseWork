{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\CourseWork\\\\frontend\\\\src\\\\components\\\\MatchList.js\";\nimport React from \"react\";\nimport MatchItem from \"./MatchItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst leagues = {\n  PL: \"Premier League\",\n  PD: \"Primera Division\",\n  SA: \"Serie A\",\n  BL: \"Bundesliga\",\n  F1: \"Ligue 1\"\n};\nfunction MatchList({\n  matches,\n  selectedLeague,\n  orderedLeagues\n}) {\n  if (matches.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-color-text-second py-10\",\n      children: \"\\u041C\\u0430\\u0442\\u0447\\u0438 \\u043D\\u0430 \\u0431\\u043B\\u0438\\u0436\\u0430\\u0439\\u0448\\u0443\\u044E \\u043D\\u0435\\u0434\\u0435\\u043B\\u044E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u044B.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n  let filterMatches = {};\n  if (!selectedLeague) {\n    // Этот блок кода выполняется ТОЛЬКО, если в `HomePage` выбрана опция \"ВСЕ лиги\"\n    // (т.е. `selectedLeague` равен `null`).\n    // Если выбрана конкретная лига, то матчи уже отфильтрованы, и группировка по лигам не нужна.\n\n    matches.forEach(match => {\n      // Перебираем каждый матч в полученном массиве `matches`.\n      const leagueCode = match.competition_code;\n      // Получаем код лиги для текущего матча.\n      // Получаем полное имя лиги для отображения, если оно не указано в match.competition_name\n      const leagueName = match.competition_name ||\n      // Пытаемся взять имя лиги из данных матча.\n      leagues[leagueCode] ||\n      // Если его нет, ищем в нашем словаре `leagues`.\n      \"Другие лиги\";\n      // Если нигде не нашли, используем общее название \"Другие лиги\".\n\n      if (!filterMatches[leagueCode]) {\n        // Если для этой лиги еще нет группы в `filterMatches`, создаем ее.\n        filterMatches[leagueCode] = {\n          name: leagueName,\n          // Имя лиги для заголовка.\n          code: leagueCode,\n          // Код лиги.\n          matches: [] // Пустой массив для матчей этой лиги.\n        };\n      }\n      filterMatches[leagueCode].matches.push(match);\n      // Добавляем текущий матч в соответствующую группу лиги.\n    });\n  }\n\n  // 3. Логика определения порядка отображения групп лиг\n\n  let leaguesToDisplay = [];\n  // Инициализируем пустой массив, который будет содержать группы лиг в правильном порядке.\n\n  if (!selectedLeague) {\n    // Этот блок также выполняется ТОЛЬКО, если выбрано \"ВСЕ лиги\".\n    const addedLeagueCodes = new Set(); // Используем Set для быстрого отслеживания уже добавленных лиг, чтобы избежать дубликатов.\n\n    // 1. Добавляем лиги в заданном порядке из orderedLeagues (полученного из sidebar'а)\n    orderedLeagues.forEach(sidebarLeague => {\n      // Перебираем лиги в том порядке, в котором они заданы в сайдбаре (`leaguesForSidebar` из `HomePage.js`).\n      if (sidebarLeague.code && filterMatches[sidebarLeague.code]) {\n        // Если это не \"ВСЕ\" (sidebarLeague.code не null) И для этой лиги есть матчи, которые мы сгруппировали,\n        leaguesToDisplay.push(filterMatches[sidebarLeague.code]);\n        // Добавляем эту группу лиг в наш список для отображения.\n        addedLeagueCodes.add(sidebarLeague.code); // Отмечаем, что этот код лиги уже добавлен.\n      }\n    });\n\n    // 2. Добавляем \"Другие лиги\" (те, которых нет в orderedLeagues), если есть\n    // Итерируем по всем группам, которые были сформированы, но еще не добавлены в `leaguesToDisplay`.\n    Object.keys(filterMatches).forEach(code => {\n      // Проходим по всем кодам лиг, для которых у нас есть сгруппированные матчи.\n      if (!addedLeagueCodes.has(code)) {\n        // Если эта лига еще не была добавлена в `leaguesToDisplay` (т.е. ее не было в `orderedLeagues` или она была там, но после \"ВСЕ\"),\n        leaguesToDisplay.push(filterMatches[code]);\n        // Добавляем ее в конец списка.\n      }\n    });\n  }\n\n  // 4. JSX (что будет отрисовано компонентом)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !selectedLeague ?\n    // Условный рендеринг: если `selectedLeague` равен `null` (выбрано \"ВСЕ\"),\n    // тогда отображаем матчи, сгруппированные по лигам.\n    leaguesToDisplay.map((leagueGroup // Итерируем по отсортированному списку групп лиг (`leaguesToDisplay`).\n    ) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-10\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl sm:text-3xl font-bold mb-6 text-center text-color-primary-yellow uppercase tracking-wider relative\",\n        children: [leagueGroup.name, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute left-1/2 -translate-x-1/2 bottom-0 w-3/4 h-0.5 bg-gradient-to-r from-transparent via-color-primary-red to-transparent opacity-75\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\",\n        children: leagueGroup.matches.map(match =>\n        /*#__PURE__*/\n        // Итерируем по матчам внутри текущей группы лиг.\n        _jsxDEV(MatchItem, {\n          match: match\n        }, match.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 19\n        }, this)\n        // Для каждого матча рендерим компонент `MatchItem`, передавая ему данные `match` и уникальный `key`.\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }, this)]\n    }, leagueGroup.code || leagueGroup.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)) :\n    /*#__PURE__*/\n    // Иначе (если выбрана конкретная лига), отображаем матчи без группировки и заголовков лиг.\n    _jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\",\n      children: matches.map(match =>\n      /*#__PURE__*/\n      // Итерируем по всем матчам, которые были переданы в `MatchList` (они уже отфильтрованы по одной лиге).\n      _jsxDEV(MatchItem, {\n        match: match\n      }, match.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)\n      // Рендерим `MatchItem` для каждого матча.\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_c = MatchList;\nexport default MatchList;\nvar _c;\n$RefreshReg$(_c, \"MatchList\");","map":{"version":3,"names":["React","MatchItem","jsxDEV","_jsxDEV","leagues","PL","PD","SA","BL","F1","MatchList","matches","selectedLeague","orderedLeagues","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","filterMatches","forEach","match","leagueCode","competition_code","leagueName","competition_name","name","code","push","leaguesToDisplay","addedLeagueCodes","Set","sidebarLeague","add","Object","keys","has","map","leagueGroup","id","_c","$RefreshReg$"],"sources":["D:/git/CourseWork/frontend/src/components/MatchList.js"],"sourcesContent":["import React from \"react\";\r\nimport MatchItem from \"./MatchItem\";\r\n\r\nconst leagues = {\r\n  PL: \"Premier League\",\r\n  PD: \"Primera Division\",\r\n  SA: \"Serie A\",\r\n  BL: \"Bundesliga\",\r\n  F1: \"Ligue 1\",\r\n};\r\n\r\nfunction MatchList({ matches, selectedLeague, orderedLeagues }) {\r\n  if (matches.length === 0) {\r\n    return (\r\n      <p className=\"text-center text-color-text-second py-10\">\r\n        Матчи на ближайшую неделю не найдены.\r\n      </p>\r\n    );\r\n  }\r\n\r\n  let filterMatches = {};\r\n\r\n  if (!selectedLeague) {\r\n    // Этот блок кода выполняется ТОЛЬКО, если в `HomePage` выбрана опция \"ВСЕ лиги\"\r\n    // (т.е. `selectedLeague` равен `null`).\r\n    // Если выбрана конкретная лига, то матчи уже отфильтрованы, и группировка по лигам не нужна.\r\n\r\n    matches.forEach((match) => {\r\n      // Перебираем каждый матч в полученном массиве `matches`.\r\n      const leagueCode = match.competition_code;\r\n      // Получаем код лиги для текущего матча.\r\n      // Получаем полное имя лиги для отображения, если оно не указано в match.competition_name\r\n      const leagueName =\r\n        match.competition_name ||\r\n        // Пытаемся взять имя лиги из данных матча.\r\n        leagues[leagueCode] ||\r\n        // Если его нет, ищем в нашем словаре `leagues`.\r\n        \"Другие лиги\";\r\n      // Если нигде не нашли, используем общее название \"Другие лиги\".\r\n\r\n      if (!filterMatches[leagueCode]) {\r\n        // Если для этой лиги еще нет группы в `filterMatches`, создаем ее.\r\n        filterMatches[leagueCode] = {\r\n          name: leagueName, // Имя лиги для заголовка.\r\n          code: leagueCode, // Код лиги.\r\n          matches: [], // Пустой массив для матчей этой лиги.\r\n        };\r\n      }\r\n      filterMatches[leagueCode].matches.push(match);\r\n      // Добавляем текущий матч в соответствующую группу лиги.\r\n    });\r\n  }\r\n\r\n  // 3. Логика определения порядка отображения групп лиг\r\n\r\n  let leaguesToDisplay = [];\r\n  // Инициализируем пустой массив, который будет содержать группы лиг в правильном порядке.\r\n\r\n  if (!selectedLeague) {\r\n    // Этот блок также выполняется ТОЛЬКО, если выбрано \"ВСЕ лиги\".\r\n    const addedLeagueCodes = new Set(); // Используем Set для быстрого отслеживания уже добавленных лиг, чтобы избежать дубликатов.\r\n\r\n    // 1. Добавляем лиги в заданном порядке из orderedLeagues (полученного из sidebar'а)\r\n    orderedLeagues.forEach((sidebarLeague) => {\r\n      // Перебираем лиги в том порядке, в котором они заданы в сайдбаре (`leaguesForSidebar` из `HomePage.js`).\r\n      if (sidebarLeague.code && filterMatches[sidebarLeague.code]) {\r\n        // Если это не \"ВСЕ\" (sidebarLeague.code не null) И для этой лиги есть матчи, которые мы сгруппировали,\r\n        leaguesToDisplay.push(filterMatches[sidebarLeague.code]);\r\n        // Добавляем эту группу лиг в наш список для отображения.\r\n        addedLeagueCodes.add(sidebarLeague.code); // Отмечаем, что этот код лиги уже добавлен.\r\n      }\r\n    });\r\n\r\n    // 2. Добавляем \"Другие лиги\" (те, которых нет в orderedLeagues), если есть\r\n    // Итерируем по всем группам, которые были сформированы, но еще не добавлены в `leaguesToDisplay`.\r\n    Object.keys(filterMatches).forEach((code) => {\r\n      // Проходим по всем кодам лиг, для которых у нас есть сгруппированные матчи.\r\n      if (!addedLeagueCodes.has(code)) {\r\n        // Если эта лига еще не была добавлена в `leaguesToDisplay` (т.е. ее не было в `orderedLeagues` или она была там, но после \"ВСЕ\"),\r\n        leaguesToDisplay.push(filterMatches[code]);\r\n        // Добавляем ее в конец списка.\r\n      }\r\n    });\r\n  }\r\n\r\n  // 4. JSX (что будет отрисовано компонентом)\r\n\r\n  return (\r\n    <div>\r\n      {!selectedLeague ? (\r\n        // Условный рендеринг: если `selectedLeague` равен `null` (выбрано \"ВСЕ\"),\r\n        // тогда отображаем матчи, сгруппированные по лигам.\r\n        leaguesToDisplay.map(\r\n          (\r\n            leagueGroup // Итерируем по отсортированному списку групп лиг (`leaguesToDisplay`).\r\n          ) => (\r\n            <div key={leagueGroup.code || leagueGroup.name} className=\"mb-10\">\r\n              {\" \"}\r\n              {/* Контейнер для каждой группы лиг. `key` важен для React. `mb-10` - нижний отступ. */}\r\n              {/* Заголовок лиги с желтым текстом и красной подсветкой */}\r\n              <h2 className=\"text-2xl sm:text-3xl font-bold mb-6 text-center text-color-primary-yellow uppercase tracking-wider relative\">\r\n                {leagueGroup.name}\r\n                {/* Отображаем название лиги (например, \"Premier League\"). */}\r\n                {/* Красная линия-подсветка по краям */}\r\n                <div className=\"absolute left-1/2 -translate-x-1/2 bottom-0 w-3/4 h-0.5 bg-gradient-to-r from-transparent via-color-primary-red to-transparent opacity-75\"></div>\r\n                {/* Это декоративная линия под заголовком, созданная с помощью Tailwind CSS. */}\r\n              </h2>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\">\r\n                {/* Сетка для отображения матчей: 1 колонка на мобильных, 2 на средних и больших экранах. */}\r\n                {leagueGroup.matches.map((match) => (\r\n                  // Итерируем по матчам внутри текущей группы лиг.\r\n                  <MatchItem key={match.id} match={match} />\r\n                  // Для каждого матча рендерим компонент `MatchItem`, передавая ему данные `match` и уникальный `key`.\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )\r\n        )\r\n      ) : (\r\n        // Иначе (если выбрана конкретная лига), отображаем матчи без группировки и заголовков лиг.\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\">\r\n          {/* Аналогичная сетка для отображения матчей. */}\r\n          {matches.map((match) => (\r\n            // Итерируем по всем матчам, которые были переданы в `MatchList` (они уже отфильтрованы по одной лиге).\r\n            <MatchItem key={match.id} match={match} />\r\n            // Рендерим `MatchItem` для каждого матча.\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MatchList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}