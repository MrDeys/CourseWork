{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\CourseWork\\\\frontend\\\\src\\\\components\\\\MatchList.js\";\n// frontend/src/components/MatchList.js\nimport React from \"react\";\nimport MatchItem from \"./MatchItem\";\n\n// Вспомогательная карта для получения полного имени лиги по коду, если competition_name отсутствует.\n// Используется для заголовков групп, когда selectedLeague === null.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst leagueCodeToFullName = {\n  PL: \"Premier League\",\n  PD: \"La Liga\",\n  SA: \"Serie A\",\n  BL1: \"Bundesliga\",\n  FL1: \"Ligue 1\"\n  // Добавьте другие лиги, если они могут появиться в данных, но не в leaguesForSidebar\n};\n\n// MatchList теперь принимает orderedLeagues для упорядочивания групп лиг\nfunction MatchList({\n  matches,\n  selectedLeague,\n  orderedLeagues\n}) {\n  if (!Array.isArray(matches)) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-brand-primary-red py-10\",\n      children: \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u043C\\u0430\\u0442\\u0447\\u0435\\u0439 \\u043D\\u0435 \\u0432 \\u043E\\u0436\\u0438\\u0434\\u0430\\u0435\\u043C\\u043E\\u043C \\u0444\\u043E\\u0440\\u043C\\u0430\\u0442\\u0435.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n  if (matches.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-brand-text-muted py-10\",\n      children: \"\\u041C\\u0430\\u0442\\u0447\\u0438 \\u043D\\u0430 \\u0431\\u043B\\u0438\\u0436\\u0430\\u0439\\u0448\\u0443\\u044E \\u043D\\u0435\\u0434\\u0435\\u043B\\u044E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u044B.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n  let groupedMatchesByCode = {}; // Теперь группируем матчи по коду лиги\n\n  if (!selectedLeague) {\n    // Только если выбрано \"ВСЕ\" (т.е., selectedLeague равен null)\n    matches.forEach(match => {\n      const leagueCode = match.competition_code;\n      // Получаем полное имя лиги для отображения, если оно не указано в match.competition_name\n      const leagueName = match.competition_name || leagueCodeToFullName[leagueCode] || \"Другие лиги\";\n      if (!groupedMatchesByCode[leagueCode]) {\n        groupedMatchesByCode[leagueCode] = {\n          name: leagueName,\n          code: leagueCode,\n          matches: []\n        };\n      }\n      groupedMatchesByCode[leagueCode].matches.push(match);\n    });\n  }\n\n  // Определяем порядок отображения групп лиг\n  let leaguesToDisplay = [];\n  if (!selectedLeague) {\n    // Только если выбрано \"ВСЕ\"\n    const addedLeagueCodes = new Set(); // Используем Set для быстрого отслеживания уже добавленных лиг\n\n    // 1. Добавляем лиги в заданном порядке из orderedLeagues\n    orderedLeagues.forEach(sidebarLeague => {\n      if (sidebarLeague.code && groupedMatchesByCode[sidebarLeague.code]) {\n        // Если это не \"ВСЕ\" и для лиги есть матчи\n        leaguesToDisplay.push(groupedMatchesByCode[sidebarLeague.code]);\n        addedLeagueCodes.add(sidebarLeague.code);\n      }\n    });\n\n    // 2. Добавляем \"Другие лиги\" (те, которых нет в orderedLeagues), если есть\n    // Итерируем по всем группам, которые были сформированы, но еще не добавлены\n    Object.keys(groupedMatchesByCode).forEach(code => {\n      if (!addedLeagueCodes.has(code)) {\n        // Если лига еще не была добавлена\n        leaguesToDisplay.push(groupedMatchesByCode[code]);\n      }\n    });\n  } else {\n    // Если выбрана конкретная лига, то группировка не нужна, рендерим просто переданные 'matches'\n    // В этом случае MatchList просто отобразит уже отфильтрованные матчи, без заголовков групп.\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !selectedLeague ?\n    // Отображение с группировкой по лигам (если выбрано \"ВСЕ\")\n    leaguesToDisplay.map((leagueGroup // Итерируем по отсортированному списку групп\n    ) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-10\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl sm:text-3xl font-bold mb-6 text-center text-brand-primary-yellow uppercase tracking-wider relative\",\n        children: [leagueGroup.name, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute left-1/2 -translate-x-1/2 bottom-0 w-3/4 h-0.5 bg-gradient-to-r from-transparent via-brand-primary-red to-transparent opacity-75\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\",\n        children: leagueGroup.matches.map(match => /*#__PURE__*/_jsxDEV(MatchItem, {\n          match: match\n        }, match.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this)]\n    }, leagueGroup.code || leagueGroup.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)) :\n    /*#__PURE__*/\n    // Отображение для одной выбранной лиги (без заголовков групп)\n    _jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\",\n      children: matches.map(match => /*#__PURE__*/_jsxDEV(MatchItem, {\n        match: match\n      }, match.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_c = MatchList;\nexport default MatchList;\nvar _c;\n$RefreshReg$(_c, \"MatchList\");","map":{"version":3,"names":["React","MatchItem","jsxDEV","_jsxDEV","leagueCodeToFullName","PL","PD","SA","BL1","FL1","MatchList","matches","selectedLeague","orderedLeagues","Array","isArray","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","groupedMatchesByCode","forEach","match","leagueCode","competition_code","leagueName","competition_name","name","code","push","leaguesToDisplay","addedLeagueCodes","Set","sidebarLeague","add","Object","keys","has","map","leagueGroup","id","_c","$RefreshReg$"],"sources":["D:/git/CourseWork/frontend/src/components/MatchList.js"],"sourcesContent":["// frontend/src/components/MatchList.js\r\nimport React from \"react\";\r\nimport MatchItem from \"./MatchItem\";\r\n\r\n// Вспомогательная карта для получения полного имени лиги по коду, если competition_name отсутствует.\r\n// Используется для заголовков групп, когда selectedLeague === null.\r\nconst leagueCodeToFullName = {\r\n  PL: \"Premier League\",\r\n  PD: \"La Liga\",\r\n  SA: \"Serie A\",\r\n  BL1: \"Bundesliga\",\r\n  FL1: \"Ligue 1\",\r\n  // Добавьте другие лиги, если они могут появиться в данных, но не в leaguesForSidebar\r\n};\r\n\r\n// MatchList теперь принимает orderedLeagues для упорядочивания групп лиг\r\nfunction MatchList({ matches, selectedLeague, orderedLeagues }) {\r\n  if (!Array.isArray(matches)) {\r\n    return (\r\n      <p className=\"text-center text-brand-primary-red py-10\">\r\n        Ошибка: данные матчей не в ожидаемом формате.\r\n      </p>\r\n    );\r\n  }\r\n  if (matches.length === 0) {\r\n    return (\r\n      <p className=\"text-center text-brand-text-muted py-10\">\r\n        Матчи на ближайшую неделю не найдены.\r\n      </p>\r\n    );\r\n  }\r\n\r\n  let groupedMatchesByCode = {}; // Теперь группируем матчи по коду лиги\r\n\r\n  if (!selectedLeague) {\r\n    // Только если выбрано \"ВСЕ\" (т.е., selectedLeague равен null)\r\n    matches.forEach((match) => {\r\n      const leagueCode = match.competition_code;\r\n      // Получаем полное имя лиги для отображения, если оно не указано в match.competition_name\r\n      const leagueName =\r\n        match.competition_name ||\r\n        leagueCodeToFullName[leagueCode] ||\r\n        \"Другие лиги\";\r\n\r\n      if (!groupedMatchesByCode[leagueCode]) {\r\n        groupedMatchesByCode[leagueCode] = {\r\n          name: leagueName,\r\n          code: leagueCode,\r\n          matches: [],\r\n        };\r\n      }\r\n      groupedMatchesByCode[leagueCode].matches.push(match);\r\n    });\r\n  }\r\n\r\n  // Определяем порядок отображения групп лиг\r\n  let leaguesToDisplay = [];\r\n  if (!selectedLeague) {\r\n    // Только если выбрано \"ВСЕ\"\r\n    const addedLeagueCodes = new Set(); // Используем Set для быстрого отслеживания уже добавленных лиг\r\n\r\n    // 1. Добавляем лиги в заданном порядке из orderedLeagues\r\n    orderedLeagues.forEach((sidebarLeague) => {\r\n      if (sidebarLeague.code && groupedMatchesByCode[sidebarLeague.code]) {\r\n        // Если это не \"ВСЕ\" и для лиги есть матчи\r\n        leaguesToDisplay.push(groupedMatchesByCode[sidebarLeague.code]);\r\n        addedLeagueCodes.add(sidebarLeague.code);\r\n      }\r\n    });\r\n\r\n    // 2. Добавляем \"Другие лиги\" (те, которых нет в orderedLeagues), если есть\r\n    // Итерируем по всем группам, которые были сформированы, но еще не добавлены\r\n    Object.keys(groupedMatchesByCode).forEach((code) => {\r\n      if (!addedLeagueCodes.has(code)) {\r\n        // Если лига еще не была добавлена\r\n        leaguesToDisplay.push(groupedMatchesByCode[code]);\r\n      }\r\n    });\r\n  } else {\r\n    // Если выбрана конкретная лига, то группировка не нужна, рендерим просто переданные 'matches'\r\n    // В этом случае MatchList просто отобразит уже отфильтрованные матчи, без заголовков групп.\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!selectedLeague ? ( // Отображение с группировкой по лигам (если выбрано \"ВСЕ\")\r\n        leaguesToDisplay.map(\r\n          (\r\n            leagueGroup // Итерируем по отсортированному списку групп\r\n          ) => (\r\n            <div key={leagueGroup.code || leagueGroup.name} className=\"mb-10\">\r\n              {\" \"}\r\n              {/* Уникальный ключ для группы */}\r\n              {/* Заголовок лиги с желтым текстом и красной подсветкой */}\r\n              <h2 className=\"text-2xl sm:text-3xl font-bold mb-6 text-center text-brand-primary-yellow uppercase tracking-wider relative\">\r\n                {leagueGroup.name}\r\n                {/* Красная линия-подсветка по краям */}\r\n                <div className=\"absolute left-1/2 -translate-x-1/2 bottom-0 w-3/4 h-0.5 bg-gradient-to-r from-transparent via-brand-primary-red to-transparent opacity-75\"></div>\r\n              </h2>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\">\r\n                {leagueGroup.matches.map((match) => (\r\n                  <MatchItem key={match.id} match={match} />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )\r\n        )\r\n      ) : (\r\n        // Отображение для одной выбранной лиги (без заголовков групп)\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8\">\r\n          {matches.map((match) => (\r\n            <MatchItem key={match.id} match={match} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MatchList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}