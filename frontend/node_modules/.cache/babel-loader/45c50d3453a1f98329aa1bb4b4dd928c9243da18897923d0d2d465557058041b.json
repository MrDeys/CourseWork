{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\CourseWork\\\\frontend\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\n// frontend/src/pages/HomePage.js\nimport React, { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport MatchList from \"../components/MatchList\";\nimport { getMatches } from \"../api\";\nimport LeagueSidebar from \"../components/Layout/LeagueSidebar\";\nimport StandingsWidget from \"../components/Widgets/StandingsWidget\"; // Импортируем виджет\n\n// --- Импорты логотипов лиг ---\n// Убедитесь, что эти пути и имена файлов соответствуют вашим локальным ассетам\n// Если логотипов нет локально, используйте null или URL-строки\nimport plLogo from \"../assets/leagues/premier-league.png\";\nimport blLogo from \"../assets/leagues/bundesliga.png\";\nimport saLogo from \"../assets/leagues/serie-a.png\";\nimport pdLogo from \"../assets/leagues/la-liga.png\";\nimport flLogo from \"../assets/leagues/ligue-1.png\";\n\n// --- Конфигурация данных для сайдбара ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst leaguesForSidebar = [{\n  code: null,\n  name: \"ВСЕ\",\n  shortName: \"Все\",\n  logo: null\n}, {\n  code: \"PL\",\n  name: \"Premier League\",\n  shortName: \"АПЛ\",\n  logo: plLogo\n}, {\n  code: \"BL1\",\n  name: \"Bundesliga\",\n  shortName: \"Бундеслига\",\n  logo: blLogo\n}, {\n  code: \"SA\",\n  name: \"Serie A\",\n  shortName: \"Серия А\",\n  logo: saLogo\n}, {\n  code: \"PD\",\n  name: \"La Liga\",\n  shortName: \"Ла Лига\",\n  logo: pdLogo\n}, {\n  code: \"FL1\",\n  name: \"Ligue 1\",\n  shortName: \"Лига 1\",\n  logo: flLogo\n}];\n\n// --- Вспомогательная функция для определения текущего сезона (год начала) ---\nconst getCurrentSeasonYear = () => {\n  const now = new Date();\n  let year = now.getFullYear();\n  // Сезон определяется годом его начала. Если текущий месяц до июля,\n  // значит, текущий футбольный сезон начался в прошлом календарном году.\n  if (now.getMonth() < 7) {\n    // Месяцы 0 (янв) до 6 (июль)\n    year -= 1;\n  }\n  return year;\n};\n\n// --- Вспомогательная функция для сопоставления кодов лиг с ID для API-Sports ---\n// !!! ВАЖНО: Заполните это правильными ID из документации API-Sports.io !!!\nconst leagueCodeToApiSportsId = code => {\n  const map = {\n    PL: 39,\n    // Английская Премьер-лига\n    BL1: 78,\n    // Немецкая Бундеслига\n    SA: 135,\n    // Итальянская Серия А\n    PD: 140,\n    // Испанская Ла Лига\n    FL1: 61 // Французская Лига 1\n  };\n  return map[code] || null; // Возвращаем ID или null, если код не найден\n};\nfunction HomePage() {\n  _s();\n  // Состояние для всех матчей, загруженных с бэкэнда\n  const [allFetchedMatches, setAllFetchedMatches] = useState([]);\n  // Состояние для матчей, которые будут отображены после фильтрации\n  const [displayedMatches, setDisplayedMatches] = useState([]);\n  // Состояние для отслеживания процесса загрузки\n  const [loading, setLoading] = useState(true);\n\n  // Хук для работы с query-параметрами URL (например, ?league=PL)\n  const [searchParams, setSearchParams] = useSearchParams();\n  // Получаем значение параметра 'league' из URL. Если его нет, selectedLeagueCode будет null.\n  const selectedLeagueCode = searchParams.get(\"league\");\n\n  // Эффект для загрузки ВСЕХ матчей один раз при монтировании компонента\n  useEffect(() => {\n    const fetchAllMatches = async () => {\n      setLoading(true);\n      console.log(\"HomePage: Запрос всех матчей...\");\n      const data = await getMatches(null); // Вызываем getMatches без кода лиги для загрузки всех\n      if (Array.isArray(data)) {\n        setAllFetchedMatches(data);\n        console.log(\"HomePage: Все матчи загружены:\", data.length);\n      } else {\n        console.error(\"HomePage: Данные от getMatches (всех) не являются массивом!\", data);\n        setAllFetchedMatches([]);\n      }\n      setLoading(false);\n    };\n    fetchAllMatches();\n  }, []); // Пустой массив зависимостей -> выполняется один раз\n\n  // Эффект для фильтрации и сортировки матчей, когда изменяются\n  // allFetchedMatches (загруженные данные) или selectedLeagueCode (выбранная лига из URL)\n  useEffect(() => {\n    // Если исходные данные еще грузятся, не производим фильтрацию\n    if (loading && allFetchedMatches.length === 0) {\n      setDisplayedMatches([]); // Очищаем отображаемые матчи\n      return;\n    }\n    // Если загрузка завершена, но матчей по какой-то причине нет\n    if (!loading && allFetchedMatches.length === 0) {\n      setDisplayedMatches([]);\n      return;\n    }\n    let filteredMatchesSource = allFetchedMatches;\n\n    // 1. Фильтруем по выбранной лиге (если она выбрана)\n    if (selectedLeagueCode) {\n      filteredMatchesSource = filteredMatchesSource.filter(match => match.competition_code === selectedLeagueCode);\n    }\n\n    // 2. Фильтруем по предстоящим матчам на ближайшую неделю\n    const now = new Date();\n    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate()); // Начало сегодняшнего дня 00:00:00\n    const oneWeekFromNowEnd = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\n    oneWeekFromNowEnd.setHours(23, 59, 59, 999); // Конец дня через неделю\n\n    const upcomingFiltered = filteredMatchesSource.filter(match => {\n      if (!match.utcDate) return false; // Пропускаем матчи без корректной даты\n      const matchDate = new Date(match.utcDate); // Предполагаем, что utcDate это строка UTC\n      return match.status !== \"FINISHED\" &&\n      // Только не завершенные\n      matchDate >= todayStart &&\n      // Матч сегодня или в будущем\n      matchDate <= oneWeekFromNowEnd // И в пределах ближайшей недели\n      ;\n    });\n\n    // 3. Сортируем отфильтрованные матчи по дате (ближайшие сначала)\n    upcomingFiltered.sort((a, b) => new Date(a.utcDate) - new Date(b.utcDate));\n    setDisplayedMatches(upcomingFiltered);\n  }, [allFetchedMatches, selectedLeagueCode, loading]); // Зависимости этого эффекта\n\n  // Обработчик выбора лиги в сайдбаре\n  const handleLeagueSelect = leagueCode => {\n    // Устанавливаем query-параметр 'league' в URL.\n    // Если leagueCode равен null (для кнопки \"ВСЕ\"), query-параметр удаляется.\n    setSearchParams(leagueCode ? {\n      league: leagueCode\n    } : {});\n  };\n\n  // Определяем объект текущей выбранной лиги для отображения ее имени и передачи ID в виджет\n  const currentLeagueObjectForTitle = selectedLeagueCode ? leaguesForSidebar.find(l => l.code === selectedLeagueCode) : {\n    name: \"Все предстоящие матчи (неделя)\"\n  }; // Заголовок по умолчанию для \"ВСЕ\"\n\n  const pageTitle = currentLeagueObjectForTitle.name;\n\n  // Определяем ID лиги для виджета api-sports\n  const apiSportsLeagueId = selectedLeagueCode ? leagueCodeToApiSportsId(selectedLeagueCode) : null;\n  const seasonForWidget = getCurrentSeasonYear();\n\n  // Классы для позиционирования sticky сайдбаров\n  // Высота хедера h-16 (4rem). Отступ для сайдбаров чуть больше.\n  const sidebarStickyTop = \"top-[calc(4rem+1rem)]\"; // 4rem (header) + 1rem (зазор) = 5rem\n  const sidebarMaxHeight = `max-h-[calc(100vh_-_5rem_-_theme(spacing.8))]`; // 100vh - top_offset - main_padding_bottom (2rem)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col lg:flex-row gap-6 lg:gap-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: `w-full lg:w-60 xl:w-64 flex-shrink-0 mb-6 lg:mb-0 lg:sticky ${sidebarStickyTop} self-start ${sidebarMaxHeight} overflow-y-auto rounded-lg`,\n      children: /*#__PURE__*/_jsxDEV(LeagueSidebar, {\n        leagues: leaguesForSidebar,\n        selectedLeague: selectedLeagueCode,\n        onSelectLeague: handleLeagueSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"w-full lg:flex-grow min-w-0\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl sm:text-3xl font-bold mb-6 text-center text-brand-primary-yellow uppercase tracking-wider\",\n        children: pageTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), loading && displayedMatches.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center h-64\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xl text-brand-text-muted animate-pulse\",\n          children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043C\\u0430\\u0442\\u0447\\u0435\\u0439...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MatchList, {\n        matches: displayedMatches,\n        selectedLeague: selectedLeagueCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: `w-full lg:w-72 xl:w-80 flex-shrink-0 hidden md:block lg:sticky ${sidebarStickyTop} self-start ${sidebarMaxHeight} overflow-y-auto rounded-lg`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-brand-surface p-4 rounded-lg shadow-md min-h-[300px] flex flex-col\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-semibold mb-3 text-brand-primary-yellow\",\n          children: \"\\u0422\\u0443\\u0440\\u043D\\u0438\\u0440\\u043D\\u0430\\u044F \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), apiSportsLeagueId ?\n        /*#__PURE__*/\n        // Если выбрана конкретная лига и для нее есть ID\n        _jsxDEV(StandingsWidget, {\n          leagueId: apiSportsLeagueId,\n          season: seasonForWidget\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-brand-text-muted flex-grow flex items-center justify-center text-center\",\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043B\\u0438\\u0433\\u0443 \\u0432 \\u043B\\u0435\\u0432\\u043E\\u043C \\u043C\\u0435\\u043D\\u044E \\u0434\\u043B\\u044F \\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F \\u0442\\u0443\\u0440\\u043D\\u0438\\u0440\\u043D\\u043E\\u0439 \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u044B.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"lINlc5R1Q7MgBk1EjKksRdz9Cso=\", false, function () {\n  return [useSearchParams];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","useSearchParams","MatchList","getMatches","LeagueSidebar","StandingsWidget","plLogo","blLogo","saLogo","pdLogo","flLogo","jsxDEV","_jsxDEV","leaguesForSidebar","code","name","shortName","logo","getCurrentSeasonYear","now","Date","year","getFullYear","getMonth","leagueCodeToApiSportsId","map","PL","BL1","SA","PD","FL1","HomePage","_s","allFetchedMatches","setAllFetchedMatches","displayedMatches","setDisplayedMatches","loading","setLoading","searchParams","setSearchParams","selectedLeagueCode","get","fetchAllMatches","console","log","data","Array","isArray","length","error","filteredMatchesSource","filter","match","competition_code","todayStart","getDate","oneWeekFromNowEnd","getTime","setHours","upcomingFiltered","utcDate","matchDate","status","sort","a","b","handleLeagueSelect","leagueCode","league","currentLeagueObjectForTitle","find","l","pageTitle","apiSportsLeagueId","seasonForWidget","sidebarStickyTop","sidebarMaxHeight","className","children","leagues","selectedLeague","onSelectLeague","fileName","_jsxFileName","lineNumber","columnNumber","matches","leagueId","season","_c","$RefreshReg$"],"sources":["D:/git/CourseWork/frontend/src/pages/HomePage.js"],"sourcesContent":["// frontend/src/pages/HomePage.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport MatchList from \"../components/MatchList\";\r\nimport { getMatches } from \"../api\";\r\nimport LeagueSidebar from \"../components/Layout/LeagueSidebar\";\r\nimport StandingsWidget from \"../components/Widgets/StandingsWidget\"; // Импортируем виджет\r\n\r\n// --- Импорты логотипов лиг ---\r\n// Убедитесь, что эти пути и имена файлов соответствуют вашим локальным ассетам\r\n// Если логотипов нет локально, используйте null или URL-строки\r\nimport plLogo from \"../assets/leagues/premier-league.png\";\r\nimport blLogo from \"../assets/leagues/bundesliga.png\";\r\nimport saLogo from \"../assets/leagues/serie-a.png\";\r\nimport pdLogo from \"../assets/leagues/la-liga.png\";\r\nimport flLogo from \"../assets/leagues/ligue-1.png\";\r\n\r\n// --- Конфигурация данных для сайдбара ---\r\nconst leaguesForSidebar = [\r\n  { code: null, name: \"ВСЕ\", shortName: \"Все\", logo: null },\r\n  { code: \"PL\", name: \"Premier League\", shortName: \"АПЛ\", logo: plLogo },\r\n  { code: \"BL1\", name: \"Bundesliga\", shortName: \"Бундеслига\", logo: blLogo },\r\n  { code: \"SA\", name: \"Serie A\", shortName: \"Серия А\", logo: saLogo },\r\n  { code: \"PD\", name: \"La Liga\", shortName: \"Ла Лига\", logo: pdLogo },\r\n  { code: \"FL1\", name: \"Ligue 1\", shortName: \"Лига 1\", logo: flLogo },\r\n];\r\n\r\n// --- Вспомогательная функция для определения текущего сезона (год начала) ---\r\nconst getCurrentSeasonYear = () => {\r\n  const now = new Date();\r\n  let year = now.getFullYear();\r\n  // Сезон определяется годом его начала. Если текущий месяц до июля,\r\n  // значит, текущий футбольный сезон начался в прошлом календарном году.\r\n  if (now.getMonth() < 7) {\r\n    // Месяцы 0 (янв) до 6 (июль)\r\n    year -= 1;\r\n  }\r\n  return year;\r\n};\r\n\r\n// --- Вспомогательная функция для сопоставления кодов лиг с ID для API-Sports ---\r\n// !!! ВАЖНО: Заполните это правильными ID из документации API-Sports.io !!!\r\nconst leagueCodeToApiSportsId = (code) => {\r\n  const map = {\r\n    PL: 39, // Английская Премьер-лига\r\n    BL1: 78, // Немецкая Бундеслига\r\n    SA: 135, // Итальянская Серия А\r\n    PD: 140, // Испанская Ла Лига\r\n    FL1: 61, // Французская Лига 1\r\n  };\r\n  return map[code] || null; // Возвращаем ID или null, если код не найден\r\n};\r\n\r\nfunction HomePage() {\r\n  // Состояние для всех матчей, загруженных с бэкэнда\r\n  const [allFetchedMatches, setAllFetchedMatches] = useState([]);\r\n  // Состояние для матчей, которые будут отображены после фильтрации\r\n  const [displayedMatches, setDisplayedMatches] = useState([]);\r\n  // Состояние для отслеживания процесса загрузки\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Хук для работы с query-параметрами URL (например, ?league=PL)\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  // Получаем значение параметра 'league' из URL. Если его нет, selectedLeagueCode будет null.\r\n  const selectedLeagueCode = searchParams.get(\"league\");\r\n\r\n  // Эффект для загрузки ВСЕХ матчей один раз при монтировании компонента\r\n  useEffect(() => {\r\n    const fetchAllMatches = async () => {\r\n      setLoading(true);\r\n      console.log(\"HomePage: Запрос всех матчей...\");\r\n      const data = await getMatches(null); // Вызываем getMatches без кода лиги для загрузки всех\r\n      if (Array.isArray(data)) {\r\n        setAllFetchedMatches(data);\r\n        console.log(\"HomePage: Все матчи загружены:\", data.length);\r\n      } else {\r\n        console.error(\r\n          \"HomePage: Данные от getMatches (всех) не являются массивом!\",\r\n          data\r\n        );\r\n        setAllFetchedMatches([]);\r\n      }\r\n      setLoading(false);\r\n    };\r\n    fetchAllMatches();\r\n  }, []); // Пустой массив зависимостей -> выполняется один раз\r\n\r\n  // Эффект для фильтрации и сортировки матчей, когда изменяются\r\n  // allFetchedMatches (загруженные данные) или selectedLeagueCode (выбранная лига из URL)\r\n  useEffect(() => {\r\n    // Если исходные данные еще грузятся, не производим фильтрацию\r\n    if (loading && allFetchedMatches.length === 0) {\r\n      setDisplayedMatches([]); // Очищаем отображаемые матчи\r\n      return;\r\n    }\r\n    // Если загрузка завершена, но матчей по какой-то причине нет\r\n    if (!loading && allFetchedMatches.length === 0) {\r\n      setDisplayedMatches([]);\r\n      return;\r\n    }\r\n\r\n    let filteredMatchesSource = allFetchedMatches;\r\n\r\n    // 1. Фильтруем по выбранной лиге (если она выбрана)\r\n    if (selectedLeagueCode) {\r\n      filteredMatchesSource = filteredMatchesSource.filter(\r\n        (match) => match.competition_code === selectedLeagueCode\r\n      );\r\n    }\r\n\r\n    // 2. Фильтруем по предстоящим матчам на ближайшую неделю\r\n    const now = new Date();\r\n    const todayStart = new Date(\r\n      now.getFullYear(),\r\n      now.getMonth(),\r\n      now.getDate()\r\n    ); // Начало сегодняшнего дня 00:00:00\r\n    const oneWeekFromNowEnd = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\r\n    oneWeekFromNowEnd.setHours(23, 59, 59, 999); // Конец дня через неделю\r\n\r\n    const upcomingFiltered = filteredMatchesSource.filter((match) => {\r\n      if (!match.utcDate) return false; // Пропускаем матчи без корректной даты\r\n      const matchDate = new Date(match.utcDate); // Предполагаем, что utcDate это строка UTC\r\n      return (\r\n        match.status !== \"FINISHED\" && // Только не завершенные\r\n        matchDate >= todayStart && // Матч сегодня или в будущем\r\n        matchDate <= oneWeekFromNowEnd // И в пределах ближайшей недели\r\n      );\r\n    });\r\n\r\n    // 3. Сортируем отфильтрованные матчи по дате (ближайшие сначала)\r\n    upcomingFiltered.sort((a, b) => new Date(a.utcDate) - new Date(b.utcDate));\r\n\r\n    setDisplayedMatches(upcomingFiltered);\r\n  }, [allFetchedMatches, selectedLeagueCode, loading]); // Зависимости этого эффекта\r\n\r\n  // Обработчик выбора лиги в сайдбаре\r\n  const handleLeagueSelect = (leagueCode) => {\r\n    // Устанавливаем query-параметр 'league' в URL.\r\n    // Если leagueCode равен null (для кнопки \"ВСЕ\"), query-параметр удаляется.\r\n    setSearchParams(leagueCode ? { league: leagueCode } : {});\r\n  };\r\n\r\n  // Определяем объект текущей выбранной лиги для отображения ее имени и передачи ID в виджет\r\n  const currentLeagueObjectForTitle = selectedLeagueCode\r\n    ? leaguesForSidebar.find((l) => l.code === selectedLeagueCode)\r\n    : { name: \"Все предстоящие матчи (неделя)\" }; // Заголовок по умолчанию для \"ВСЕ\"\r\n\r\n  const pageTitle = currentLeagueObjectForTitle.name;\r\n\r\n  // Определяем ID лиги для виджета api-sports\r\n  const apiSportsLeagueId = selectedLeagueCode\r\n    ? leagueCodeToApiSportsId(selectedLeagueCode)\r\n    : null;\r\n  const seasonForWidget = getCurrentSeasonYear();\r\n\r\n  // Классы для позиционирования sticky сайдбаров\r\n  // Высота хедера h-16 (4rem). Отступ для сайдбаров чуть больше.\r\n  const sidebarStickyTop = \"top-[calc(4rem+1rem)]\"; // 4rem (header) + 1rem (зазор) = 5rem\r\n  const sidebarMaxHeight = `max-h-[calc(100vh_-_5rem_-_theme(spacing.8))]`; // 100vh - top_offset - main_padding_bottom (2rem)\r\n\r\n  return (\r\n    <div className=\"flex flex-col lg:flex-row gap-6 lg:gap-8\">\r\n      {/* Левый сайдбар */}\r\n      <aside\r\n        className={`w-full lg:w-60 xl:w-64 flex-shrink-0 mb-6 lg:mb-0 lg:sticky ${sidebarStickyTop} self-start ${sidebarMaxHeight} overflow-y-auto rounded-lg`}\r\n      >\r\n        <LeagueSidebar\r\n          leagues={leaguesForSidebar}\r\n          selectedLeague={selectedLeagueCode}\r\n          onSelectLeague={handleLeagueSelect}\r\n        />\r\n      </aside>\r\n\r\n      {/* Центральная колонка с матчами */}\r\n      <section className=\"w-full lg:flex-grow min-w-0\">\r\n        {\" \"}\r\n        {/* min-w-0 важен для корректной работы flex-grow с grid */}\r\n        <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-center text-brand-primary-yellow uppercase tracking-wider\">\r\n          {pageTitle}\r\n        </h1>\r\n        {/* Показываем загрузку, только если displayedMatches еще не заполнен и основные данные грузятся */}\r\n        {loading && displayedMatches.length === 0 ? (\r\n          <div className=\"flex justify-center items-center h-64\">\r\n            <p className=\"text-xl text-brand-text-muted animate-pulse\">\r\n              Загрузка матчей...\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <MatchList\r\n            matches={displayedMatches}\r\n            selectedLeague={selectedLeagueCode}\r\n          />\r\n        )}\r\n      </section>\r\n\r\n      {/* Правый сайдбар для турнирной таблицы */}\r\n      <aside\r\n        className={`w-full lg:w-72 xl:w-80 flex-shrink-0 hidden md:block lg:sticky ${sidebarStickyTop} self-start ${sidebarMaxHeight} overflow-y-auto rounded-lg`}\r\n      >\r\n        <div className=\"bg-brand-surface p-4 rounded-lg shadow-md min-h-[300px] flex flex-col\">\r\n          <h3 className=\"text-xl font-semibold mb-3 text-brand-primary-yellow\">\r\n            Турнирная таблица\r\n          </h3>\r\n          {apiSportsLeagueId ? ( // Если выбрана конкретная лига и для нее есть ID\r\n            <StandingsWidget\r\n              leagueId={apiSportsLeagueId}\r\n              season={seasonForWidget}\r\n            />\r\n          ) : (\r\n            <p className=\"text-brand-text-muted flex-grow flex items-center justify-center text-center\">\r\n              Выберите лигу в левом меню для отображения турнирной таблицы.\r\n            </p>\r\n          )}\r\n        </div>\r\n      </aside>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAASC,UAAU,QAAQ,QAAQ;AACnC,OAAOC,aAAa,MAAM,oCAAoC;AAC9D,OAAOC,eAAe,MAAM,uCAAuC,CAAC,CAAC;;AAErE;AACA;AACA;AACA,OAAOC,MAAM,MAAM,sCAAsC;AACzD,OAAOC,MAAM,MAAM,kCAAkC;AACrD,OAAOC,MAAM,MAAM,+BAA+B;AAClD,OAAOC,MAAM,MAAM,+BAA+B;AAClD,OAAOC,MAAM,MAAM,+BAA+B;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,iBAAiB,GAAG,CACxB;EAAEC,IAAI,EAAE,IAAI;EAAEC,IAAI,EAAE,KAAK;EAAEC,SAAS,EAAE,KAAK;EAAEC,IAAI,EAAE;AAAK,CAAC,EACzD;EAAEH,IAAI,EAAE,IAAI;EAAEC,IAAI,EAAE,gBAAgB;EAAEC,SAAS,EAAE,KAAK;EAAEC,IAAI,EAAEX;AAAO,CAAC,EACtE;EAAEQ,IAAI,EAAE,KAAK;EAAEC,IAAI,EAAE,YAAY;EAAEC,SAAS,EAAE,YAAY;EAAEC,IAAI,EAAEV;AAAO,CAAC,EAC1E;EAAEO,IAAI,EAAE,IAAI;EAAEC,IAAI,EAAE,SAAS;EAAEC,SAAS,EAAE,SAAS;EAAEC,IAAI,EAAET;AAAO,CAAC,EACnE;EAAEM,IAAI,EAAE,IAAI;EAAEC,IAAI,EAAE,SAAS;EAAEC,SAAS,EAAE,SAAS;EAAEC,IAAI,EAAER;AAAO,CAAC,EACnE;EAAEK,IAAI,EAAE,KAAK;EAAEC,IAAI,EAAE,SAAS;EAAEC,SAAS,EAAE,QAAQ;EAAEC,IAAI,EAAEP;AAAO,CAAC,CACpE;;AAED;AACA,MAAMQ,oBAAoB,GAAGA,CAAA,KAAM;EACjC,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,IAAIC,IAAI,GAAGF,GAAG,CAACG,WAAW,CAAC,CAAC;EAC5B;EACA;EACA,IAAIH,GAAG,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE;IACtB;IACAF,IAAI,IAAI,CAAC;EACX;EACA,OAAOA,IAAI;AACb,CAAC;;AAED;AACA;AACA,MAAMG,uBAAuB,GAAIV,IAAI,IAAK;EACxC,MAAMW,GAAG,GAAG;IACVC,EAAE,EAAE,EAAE;IAAE;IACRC,GAAG,EAAE,EAAE;IAAE;IACTC,EAAE,EAAE,GAAG;IAAE;IACTC,EAAE,EAAE,GAAG;IAAE;IACTC,GAAG,EAAE,EAAE,CAAE;EACX,CAAC;EACD,OAAOL,GAAG,CAACX,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;AAC5B,CAAC;AAED,SAASiB,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB;EACA,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EAC9D;EACA,MAAM,CAACoC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EAC5D;EACA,MAAM,CAACsC,OAAO,EAAEC,UAAU,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAM,CAACwC,YAAY,EAAEC,eAAe,CAAC,GAAGvC,eAAe,CAAC,CAAC;EACzD;EACA,MAAMwC,kBAAkB,GAAGF,YAAY,CAACG,GAAG,CAAC,QAAQ,CAAC;;EAErD;EACA1C,SAAS,CAAC,MAAM;IACd,MAAM2C,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClCL,UAAU,CAAC,IAAI,CAAC;MAChBM,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9C,MAAMC,IAAI,GAAG,MAAM3C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;MACrC,IAAI4C,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;QACvBZ,oBAAoB,CAACY,IAAI,CAAC;QAC1BF,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEC,IAAI,CAACG,MAAM,CAAC;MAC5D,CAAC,MAAM;QACLL,OAAO,CAACM,KAAK,CACX,6DAA6D,EAC7DJ,IACF,CAAC;QACDZ,oBAAoB,CAAC,EAAE,CAAC;MAC1B;MACAI,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IACDK,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA;EACA3C,SAAS,CAAC,MAAM;IACd;IACA,IAAIqC,OAAO,IAAIJ,iBAAiB,CAACgB,MAAM,KAAK,CAAC,EAAE;MAC7Cb,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;MACzB;IACF;IACA;IACA,IAAI,CAACC,OAAO,IAAIJ,iBAAiB,CAACgB,MAAM,KAAK,CAAC,EAAE;MAC9Cb,mBAAmB,CAAC,EAAE,CAAC;MACvB;IACF;IAEA,IAAIe,qBAAqB,GAAGlB,iBAAiB;;IAE7C;IACA,IAAIQ,kBAAkB,EAAE;MACtBU,qBAAqB,GAAGA,qBAAqB,CAACC,MAAM,CACjDC,KAAK,IAAKA,KAAK,CAACC,gBAAgB,KAAKb,kBACxC,CAAC;IACH;;IAEA;IACA,MAAMtB,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,MAAMmC,UAAU,GAAG,IAAInC,IAAI,CACzBD,GAAG,CAACG,WAAW,CAAC,CAAC,EACjBH,GAAG,CAACI,QAAQ,CAAC,CAAC,EACdJ,GAAG,CAACqC,OAAO,CAAC,CACd,CAAC,CAAC,CAAC;IACH,MAAMC,iBAAiB,GAAG,IAAIrC,IAAI,CAACD,GAAG,CAACuC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAC3ED,iBAAiB,CAACE,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;;IAE7C,MAAMC,gBAAgB,GAAGT,qBAAqB,CAACC,MAAM,CAAEC,KAAK,IAAK;MAC/D,IAAI,CAACA,KAAK,CAACQ,OAAO,EAAE,OAAO,KAAK,CAAC,CAAC;MAClC,MAAMC,SAAS,GAAG,IAAI1C,IAAI,CAACiC,KAAK,CAACQ,OAAO,CAAC,CAAC,CAAC;MAC3C,OACER,KAAK,CAACU,MAAM,KAAK,UAAU;MAAI;MAC/BD,SAAS,IAAIP,UAAU;MAAI;MAC3BO,SAAS,IAAIL,iBAAiB,CAAC;MAAA;IAEnC,CAAC,CAAC;;IAEF;IACAG,gBAAgB,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAI9C,IAAI,CAAC6C,CAAC,CAACJ,OAAO,CAAC,GAAG,IAAIzC,IAAI,CAAC8C,CAAC,CAACL,OAAO,CAAC,CAAC;IAE1EzB,mBAAmB,CAACwB,gBAAgB,CAAC;EACvC,CAAC,EAAE,CAAC3B,iBAAiB,EAAEQ,kBAAkB,EAAEJ,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAM8B,kBAAkB,GAAIC,UAAU,IAAK;IACzC;IACA;IACA5B,eAAe,CAAC4B,UAAU,GAAG;MAAEC,MAAM,EAAED;IAAW,CAAC,GAAG,CAAC,CAAC,CAAC;EAC3D,CAAC;;EAED;EACA,MAAME,2BAA2B,GAAG7B,kBAAkB,GAClD5B,iBAAiB,CAAC0D,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC1D,IAAI,KAAK2B,kBAAkB,CAAC,GAC5D;IAAE1B,IAAI,EAAE;EAAiC,CAAC,CAAC,CAAC;;EAEhD,MAAM0D,SAAS,GAAGH,2BAA2B,CAACvD,IAAI;;EAElD;EACA,MAAM2D,iBAAiB,GAAGjC,kBAAkB,GACxCjB,uBAAuB,CAACiB,kBAAkB,CAAC,GAC3C,IAAI;EACR,MAAMkC,eAAe,GAAGzD,oBAAoB,CAAC,CAAC;;EAE9C;EACA;EACA,MAAM0D,gBAAgB,GAAG,uBAAuB,CAAC,CAAC;EAClD,MAAMC,gBAAgB,GAAG,+CAA+C,CAAC,CAAC;;EAE1E,oBACEjE,OAAA;IAAKkE,SAAS,EAAC,0CAA0C;IAAAC,QAAA,gBAEvDnE,OAAA;MACEkE,SAAS,EAAE,+DAA+DF,gBAAgB,eAAeC,gBAAgB,6BAA8B;MAAAE,QAAA,eAEvJnE,OAAA,CAACR,aAAa;QACZ4E,OAAO,EAAEnE,iBAAkB;QAC3BoE,cAAc,EAAExC,kBAAmB;QACnCyC,cAAc,EAAEf;MAAmB;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eAGR1E,OAAA;MAASkE,SAAS,EAAC,6BAA6B;MAAAC,QAAA,GAC7C,GAAG,eAEJnE,OAAA;QAAIkE,SAAS,EAAC,oGAAoG;QAAAC,QAAA,EAC/GN;MAAS;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,EAEJjD,OAAO,IAAIF,gBAAgB,CAACc,MAAM,KAAK,CAAC,gBACvCrC,OAAA;QAAKkE,SAAS,EAAC,uCAAuC;QAAAC,QAAA,eACpDnE,OAAA;UAAGkE,SAAS,EAAC,6CAA6C;UAAAC,QAAA,EAAC;QAE3D;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,gBAEN1E,OAAA,CAACV,SAAS;QACRqF,OAAO,EAAEpD,gBAAiB;QAC1B8C,cAAc,EAAExC;MAAmB;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM,CAAC,eAGV1E,OAAA;MACEkE,SAAS,EAAE,kEAAkEF,gBAAgB,eAAeC,gBAAgB,6BAA8B;MAAAE,QAAA,eAE1JnE,OAAA;QAAKkE,SAAS,EAAC,uEAAuE;QAAAC,QAAA,gBACpFnE,OAAA;UAAIkE,SAAS,EAAC,sDAAsD;UAAAC,QAAA,EAAC;QAErE;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACJZ,iBAAiB;QAAA;QAAK;QACrB9D,OAAA,CAACP,eAAe;UACdmF,QAAQ,EAAEd,iBAAkB;UAC5Be,MAAM,EAAEd;QAAgB;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB,CAAC,gBAEF1E,OAAA;UAAGkE,SAAS,EAAC,8EAA8E;UAAAC,QAAA,EAAC;QAE5F;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CACJ;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACtD,EAAA,CArKQD,QAAQ;EAAA,QASyB9B,eAAe;AAAA;AAAAyF,EAAA,GAThD3D,QAAQ;AAuKjB,eAAeA,QAAQ;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}